!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("THREE")):"function"==typeof define&&define.amd?define(["THREE"],n):"object"==typeof exports?exports.ThreeDxfLoader=n(require("THREE")):t.ThreeDxfLoader=n(t.THREE)}("undefined"!=typeof self?self:this,(function(__WEBPACK_EXTERNAL_MODULE__0__){return function(t){var n={};function g(c){if(n[c])return n[c].exports;var I=n[c]={i:c,l:!1,exports:{}};return t[c].call(I.exports,I,I.exports,g),I.l=!0,I.exports}return g.m=t,g.c=n,g.d=function(t,n,c){g.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:c})},g.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},g.t=function(t,n){if(1&n&&(t=g(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var c=Object.create(null);if(g.r(c),Object.defineProperty(c,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var I in t)g.d(c,I,function(n){return t[n]}.bind(null,I));return c},g.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return g.d(n,"a",n),n},g.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},g.p="",g(g.s=2)}([function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UaHJlZUR4ZkxvYWRlci9leHRlcm5hbCBcIlRIUkVFXCI/ZmMwMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX187Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    "use strict";\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(this, function () {\n    "use strict";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = "undefined";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        "trace",\n        "debug",\n        "info",\n        "warn",\n        "error"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === \'function\') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn\'t print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don\'t have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === \'debug\') {\n            methodName = \'log\';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === \'trace\' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, \'log\');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn\'t present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      var storageKey = "loglevel";\n      if (name) {\n        storageKey += ":" + name;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || \'silent\').toUpperCase();\n\n          if (typeof window === undefinedType) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + "=" + levelName + ";";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + "=");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,\n          "ERROR": 4, "SILENT": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return "No console available for logging";\n              }\n          } else {\n              throw "log.setLevel() called with invalid level: " + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? "WARN" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== "string" || name === "") {\n          throw new TypeError("You must supply a name when creating a logger.");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    return defaultLogger;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"DXFLoader\", function() { return /* binding */ DXFLoader; });\n__webpack_require__.d(__webpack_exports__, \"Viewer\", function() { return /* binding */ Viewer; });\n\n// EXTERNAL MODULE: external \"THREE\"\nvar external_THREE_ = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/DxfArrayScanner.js\n/**\r\n * DxfArrayScanner\r\n *\r\n * Based off the AutoCad 2012 DXF Reference\r\n * http://images.autodesk.com/adsk/files/autocad_2012_pdf_dxf-reference_enu.pdf\r\n *\r\n * Reads through an array representing lines of a dxf file. Takes an array and\r\n * provides an easy interface to extract group code and value pairs.\r\n * @param data - an array where each element represents a line in the dxf file\r\n * @constructor\r\n */\r\nfunction DxfArrayScanner(data) {\r\n\tthis._pointer = 0;\r\n\tthis._data = data;\r\n\tthis._eof = false;\r\n}\r\n\r\n/**\r\n * Gets the next group (code, value) from the array. A group is two consecutive elements\r\n * in the array. The first is the code, the second is the value.\r\n * @returns {{code: Number}|*}\r\n */\r\nDxfArrayScanner.prototype.next = function() {\r\n\tvar group;\r\n\tif(!this.hasNext()) {\r\n\t\tif(!this._eof)\r\n\t\t\tthrow new Error('Unexpected end of input: EOF group not read before end of file. Ended on code ' + this._data[this._pointer]);\r\n\t\telse\r\n\t\t\tthrow new Error('Cannot call \\'next\\' after EOF group has been read');\r\n\t}\r\n\r\n\tgroup = {\r\n\t\tcode: parseInt(this._data[this._pointer])\r\n\t};\r\n\r\n\tthis._pointer++;\r\n\r\n\tgroup.value = parseGroupValue(group.code, this._data[this._pointer].trim());\r\n\t\r\n\tthis._pointer++;\r\n\r\n\tif(group.code === 0 && group.value === 'EOF') this._eof = true;\r\n\r\n\tthis.lastReadGroup = group;\r\n\r\n\treturn group;\r\n};\r\n\r\nDxfArrayScanner.prototype.peek = function() {\r\n\tif(!this.hasNext()) {\r\n\t\tif(!this._eof)\r\n\t\t\tthrow new Error('Unexpected end of input: EOF group not read before end of file. Ended on code ' + this._data[this._pointer]);\r\n\t\telse\r\n\t\t\tthrow new Error('Cannot call \\'next\\' after EOF group has been read');\r\n\t}\r\n\t\r\n\tvar group = {\r\n\t\tcode: parseInt(this._data[this._pointer])\r\n\t};\r\n\r\n\tgroup.value = parseGroupValue(group.code, this._data[this._pointer + 1].trim());\r\n\r\n\treturn group;\r\n};\r\n\r\n\r\nDxfArrayScanner.prototype.rewind = function(numberOfGroups) {\r\n\tnumberOfGroups = numberOfGroups || 1;\r\n\tthis._pointer = this._pointer - numberOfGroups * 2;\r\n};\r\n\r\n/**\r\n * Returns true if there is another code/value pair (2 elements in the array).\r\n * @returns {boolean}\r\n */\r\nDxfArrayScanner.prototype.hasNext = function() {\r\n\t// Check if we have read EOF group code\r\n\tif(this._eof) {\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t// We need to be sure there are two lines available\r\n\tif(this._pointer > this._data.length - 2) {\r\n\t\treturn false;\r\n\t}\r\n\treturn true;\r\n};\r\n\r\n/**\r\n * Returns true if the scanner is at the end of the array\r\n * @returns {boolean}\r\n */\r\nDxfArrayScanner.prototype.isEOF = function() {\r\n\treturn this._eof;\r\n};\r\n\r\n/**\r\n * Parse a value to its proper type.\r\n * See pages 3 - 10 of the AutoCad DXF 2012 reference given at the top of this file\r\n *\r\n * @param code\r\n * @param value\r\n * @returns {*}\r\n */\r\nfunction parseGroupValue(code, value) {\r\n\tif(code <= 9) return value;\r\n\tif(code >= 10 && code <= 59) return parseFloat(value);\r\n\tif(code >= 60 && code <= 99) return parseInt(value);\r\n\tif(code >= 100 && code <= 109) return value;\r\n\tif(code >= 110 && code <= 149) return parseFloat(value);\r\n\tif(code >= 160 && code <= 179) return parseInt(value);\r\n\tif(code >= 210 && code <= 239) return parseFloat(value);\r\n\tif(code >= 270 && code <= 289) return parseInt(value);\r\n\tif(code >= 290 && code <= 299) return parseBoolean(value);\r\n\tif(code >= 300 && code <= 369) return value;\r\n\tif(code >= 370 && code <= 389) return parseInt(value);\r\n\tif(code >= 390 && code <= 399) return value;\r\n\tif(code >= 400 && code <= 409) return parseInt(value);\r\n\tif(code >= 410 && code <= 419) return value;\r\n\tif(code >= 420 && code <= 429) return parseInt(value);\r\n\tif(code >= 430 && code <= 439) return value;\r\n\tif(code >= 440 && code <= 459) return parseInt(value);\r\n\tif(code >= 460 && code <= 469) return parseFloat(value);\r\n\tif(code >= 470 && code <= 481) return value;\r\n\tif(code === 999) return value;\r\n\tif(code >= 1000 && code <= 1009) return value;\r\n\tif(code >= 1010 && code <= 1059) return parseFloat(value);\r\n\tif(code >= 1060 && code <= 1071) return parseInt(value);\r\n\r\n\tconsole.log('WARNING: Group code does not have a defined type: %j', { code: code, value: value });\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Parse a boolean according to a 1 or 0 value\r\n * @param str\r\n * @returns {boolean}\r\n */\r\nfunction parseBoolean(str) {\r\n\tif(str === '0') return false;\r\n\tif(str === '1') return true;\r\n\tthrow TypeError('String \\'' + str + '\\' cannot be cast to Boolean type');\r\n}\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/AutoCadColorIndex.js\n/**\r\n * AutoCad files sometimes use an indexed color value between 1 and 255 inclusive.\r\n * Each value corresponds to a color. index 1 is red, that is 16711680 or 0xFF0000.\r\n * index 0 and 256, while included in this array, are actually reserved for inheritance\r\n * values in AutoCad so they should not be used for index color lookups.\r\n */\r\n\r\n/* harmony default export */ var AutoCadColorIndex = ([\r\n 0,\r\n 16711680,\r\n 16776960,\r\n 65280,\r\n 65535,\r\n 255,\r\n 16711935,\r\n 16777215,\r\n 8421504,\r\n 12632256,\r\n 16711680,\r\n 16744319,\r\n 13369344,\r\n 13395558,\r\n 10027008,\r\n 10046540,\r\n 8323072,\r\n 8339263,\r\n 4980736,\r\n 4990502,\r\n 16727808,\r\n 16752511,\r\n 13382400,\r\n 13401958,\r\n 10036736,\r\n 10051404,\r\n 8331008,\r\n 8343359,\r\n 4985600,\r\n 4992806,\r\n 16744192,\r\n 16760703,\r\n 13395456,\r\n 13408614,\r\n 10046464,\r\n 10056268,\r\n 8339200,\r\n 8347455,\r\n 4990464,\r\n 4995366,\r\n 16760576,\r\n 16768895,\r\n 13408512,\r\n 13415014,\r\n 10056192,\r\n 10061132,\r\n 8347392,\r\n 8351551,\r\n 4995328,\r\n 4997670,\r\n 16776960,\r\n 16777087,\r\n 13421568,\r\n 13421670,\r\n 10000384,\r\n 10000460,\r\n 8355584,\r\n 8355647,\r\n 5000192,\r\n 5000230,\r\n 12582656,\r\n 14679935,\r\n 10079232,\r\n 11717734,\r\n 7510016,\r\n 8755276,\r\n 6258432,\r\n 7307071,\r\n 3755008,\r\n 4344870,\r\n 8388352,\r\n 12582783,\r\n 6736896,\r\n 10079334,\r\n 5019648,\r\n 7510092,\r\n 4161280,\r\n 6258495,\r\n 2509824,\r\n 3755046,\r\n 4194048,\r\n 10485631,\r\n 3394560,\r\n 8375398,\r\n 2529280,\r\n 6264908,\r\n 2064128,\r\n 5209919,\r\n 1264640,\r\n 3099686,\r\n 65280,\r\n 8388479,\r\n 52224,\r\n 6736998,\r\n 38912,\r\n 5019724,\r\n 32512,\r\n 4161343,\r\n 19456,\r\n 2509862,\r\n 65343,\r\n 8388511,\r\n 52275,\r\n 6737023,\r\n 38950,\r\n 5019743,\r\n 32543,\r\n 4161359,\r\n 19475,\r\n 2509871,\r\n 65407,\r\n 8388543,\r\n 52326,\r\n 6737049,\r\n 38988,\r\n 5019762,\r\n 32575,\r\n 4161375,\r\n 19494,\r\n 2509881,\r\n 65471,\r\n 8388575,\r\n 52377,\r\n 6737074,\r\n 39026,\r\n 5019781,\r\n 32607,\r\n 4161391,\r\n 19513,\r\n 2509890,\r\n 65535,\r\n 8388607,\r\n 52428,\r\n 6737100,\r\n 39064,\r\n 5019800,\r\n 32639,\r\n 4161407,\r\n 19532,\r\n 2509900,\r\n 49151,\r\n 8380415,\r\n 39372,\r\n 6730444,\r\n 29336,\r\n 5014936,\r\n 24447,\r\n 4157311,\r\n 14668,\r\n 2507340,\r\n 32767,\r\n 8372223,\r\n 26316,\r\n 6724044,\r\n 19608,\r\n 5010072,\r\n 16255,\r\n 4153215,\r\n 9804,\r\n 2505036,\r\n 16383,\r\n 8364031,\r\n 13260,\r\n 6717388,\r\n 9880,\r\n 5005208,\r\n 8063,\r\n 4149119,\r\n 4940,\r\n 2502476,\r\n 255,\r\n 8355839,\r\n 204,\r\n 6710988,\r\n 152,\r\n 5000344,\r\n 127,\r\n 4145023,\r\n 76,\r\n 2500172,\r\n 4129023,\r\n 10452991,\r\n 3342540,\r\n 8349388,\r\n 2490520,\r\n 6245528,\r\n 2031743,\r\n 5193599,\r\n 1245260,\r\n 3089996,\r\n 8323327,\r\n 12550143,\r\n 6684876,\r\n 10053324,\r\n 4980888,\r\n 7490712,\r\n 4128895,\r\n 6242175,\r\n 2490444,\r\n 3745356,\r\n 12517631,\r\n 14647295,\r\n 10027212,\r\n 11691724,\r\n 7471256,\r\n 8735896,\r\n 6226047,\r\n 7290751,\r\n 3735628,\r\n 4335180,\r\n 16711935,\r\n 16744447,\r\n 13369548,\r\n 13395660,\r\n 9961624,\r\n 9981080,\r\n 8323199,\r\n 8339327,\r\n 4980812,\r\n 4990540,\r\n 16711871,\r\n 16744415,\r\n 13369497,\r\n 13395634,\r\n 9961586,\r\n 9981061,\r\n 8323167,\r\n 8339311,\r\n 4980793,\r\n 4990530,\r\n 16711807,\r\n 16744383,\r\n 13369446,\r\n 13395609,\r\n 9961548,\r\n 9981042,\r\n 8323135,\r\n 8339295,\r\n 4980774,\r\n 4990521,\r\n 16711743,\r\n 16744351,\r\n 13369395,\r\n 13395583,\r\n 9961510,\r\n 9981023,\r\n 8323103,\r\n 8339279,\r\n 4980755,\r\n 4990511,\r\n 3355443,\r\n 5987163,\r\n 8684676,\r\n 11382189,\r\n 14079702,\r\n 16777215\r\n]);\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/ParseHelpers.js\n\r\n\r\n/**\r\n * Returns the truecolor value of the given AutoCad color index value\r\n * @return {Number} truecolor value as a number\r\n */\r\nfunction getAcadColor(index) {\r\n\treturn AutoCadColorIndex[index];\r\n}\r\n\r\n/**\r\n * Parses the 2D or 3D coordinate, vector, or point. When complete,\r\n * the scanner remains on the last group of the coordinate.\r\n * @param {*} scanner \r\n */\r\nfunction ParseHelpers_parsePoint(scanner) {\r\n    var point = {};\r\n\r\n    // Reread group for the first coordinate\r\n    scanner.rewind();\r\n    var curr = scanner.next();\r\n\r\n    var code = curr.code;\r\n    point.x = curr.value;\r\n\r\n    code += 10;\r\n    curr = scanner.next();\r\n    if(curr.code != code)\r\n        throw new Error('Expected code for point value to be ' + code +\r\n        ' but got ' + curr.code + '.');\r\n    point.y = curr.value;\r\n\r\n    code += 10;\r\n    curr = scanner.next();\r\n    if(curr.code != code)\r\n    {\r\n        // Only the x and y are specified. Don't read z.\r\n        scanner.rewind(); // Let the calling code advance off the point\r\n        return point;\r\n    }\r\n    point.z = curr.value;\r\n    \r\n    return point;\r\n};\r\n\r\n/**\r\n * Attempts to parse codes common to all entities. Returns true if the group\r\n * was handled by this function.\r\n * @param {*} entity - the entity currently being parsed \r\n * @param {*} curr - the current group being parsed\r\n */\r\nfunction checkCommonEntityProperties(entity, curr) {\r\n    switch(curr.code) {\r\n        case 0:\r\n            entity.type = curr.value;\r\n            break;\r\n        case 5:\r\n            entity.handle = curr.value;\r\n            break;\r\n        case 6:\r\n            entity.lineType = curr.value;\r\n            break;\r\n        case 8: // Layer name\r\n            entity.layer = curr.value;\r\n            break;\r\n        case 48:\r\n            entity.lineTypeScale = curr.value;\r\n            break;\r\n        case 60:\r\n            entity.visible = curr.value === 0;\r\n            break;\r\n        case 62: // Acad Index Color. 0 inherits ByBlock. 256 inherits ByLayer. Default is bylayer\r\n            entity.colorIndex = curr.value;\r\n            entity.color = getAcadColor(Math.abs(curr.value));\r\n            break;\r\n        case 67:\r\n            entity.inPaperSpace = curr.value !== 0;\r\n            break;\r\n        case 100:\r\n            //ignore\r\n            break;\r\n        case 330:\r\n            entity.ownerHandle = curr.value;\r\n            break;\r\n        case 347:\r\n            entity.materialObjectHandle = curr.value;\r\n            break;\r\n        case 370:\r\n            //From https://www.woutware.com/Forum/Topic/955/lineweight?returnUrl=%2FForum%2FUserPosts%3FuserId%3D478262319\r\n            // An integer representing 100th of mm, must be one of the following values:\r\n            // 0, 5, 9, 13, 15, 18, 20, 25, 30, 35, 40, 50, 53, 60, 70, 80, 90, 100, 106, 120, 140, 158, 200, 211.\r\n            // -3 = STANDARD, -2 = BYLAYER, -1 = BYBLOCK\r\n            entity.lineweight = curr.value;\r\n            break;\r\n        case 420: // TrueColor Color\r\n            entity.color = curr.value;\r\n            break;\r\n        case 1000: \r\n            entity.extendedData = entity.extendedData || {};\r\n            entity.extendedData.customStrings = entity.extendedData.customStrings || []; \r\n            entity.extendedData.customStrings.push(curr.value);\r\n            break;\r\n        case 1001: \r\n            entity.extendedData = entity.extendedData || {};\r\n            entity.extendedData.applicationName = curr.value;\r\n            break;\r\n        default:\r\n            return false;\r\n    }\r\n    return true;\r\n};\r\n\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/entities/3dface.js\n\r\n\r\n\r\nfunction EntityParser() {}\r\n\r\nEntityParser.ForEntityName = '3DFACE';\r\n\r\nEntityParser.prototype.parseEntity = function(scanner, curr) {\r\n\r\n    var entity = { type: curr.value, vertices: [] };\r\n    curr = scanner.next();\r\n    while (curr !== 'EOF') {\r\n        if (curr.code === 0) break;\r\n        switch (curr.code) {\r\n            case 70: // 1 = Closed shape, 128 = plinegen?, 0 = default\r\n                entity.shape = ((curr.value & 1) === 1);\r\n                entity.hasContinuousLinetypePattern = ((curr.value & 128) === 128);\r\n                break;\r\n            case 10: // X coordinate of point\r\n                entity.vertices = parse3dFaceVertices(scanner, curr);\r\n                curr = scanner.lastReadGroup;\r\n                break;\r\n            default:\r\n                checkCommonEntityProperties(entity, curr);\r\n                break;\r\n        }\r\n        curr = scanner.next();\r\n    }\r\n    return entity;\r\n};\r\n\r\nfunction parse3dFaceVertices(scanner, curr) {\r\n    var vertices = [],\r\n        i;\r\n    var vertexIsStarted = false;\r\n    var vertexIsFinished = false;\r\n    var verticesPer3dFace = 4; // there can be up to four vertices per face, although 3 is most used for TIN\r\n    \r\n    for (i = 0; i <= verticesPer3dFace; i++) {\r\n        var vertex = {};\r\n        while (curr !== 'EOF') {\r\n            if (curr.code === 0 || vertexIsFinished) break;\r\n\r\n            switch (curr.code) {\r\n                case 10: // X0\r\n                case 11: // X1\r\n                case 12: // X2\r\n                case 13: // X3\r\n                    if (vertexIsStarted) {\r\n                        vertexIsFinished = true;\r\n                        continue;\r\n                    }\r\n                    vertex.x = curr.value;\r\n                    vertexIsStarted = true;\r\n                    break;\r\n                case 20: // Y\r\n                case 21:\r\n                case 22:\r\n                case 23:\r\n                    vertex.y = curr.value;\r\n                    break;\r\n                case 30: // Z\r\n                case 31:\r\n                case 32:\r\n                case 33:\r\n                    vertex.z = curr.value;\r\n                    break;\r\n                default:\r\n                    // it is possible to have entity codes after the vertices.  \r\n                    // So if code is not accounted for return to entity parser where it might be accounted for\r\n                    return vertices;\r\n                    continue;\r\n            }\r\n            curr = scanner.next();\r\n        }\r\n        // See https://groups.google.com/forum/#!topic/comp.cad.autocad/9gn8s5O_w6E\r\n        vertices.push(vertex);\r\n        vertexIsStarted = false;\r\n        vertexIsFinished = false;\r\n    }\r\n    scanner.rewind();\r\n    return vertices;\r\n};\r\n\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/entities/arc.js\n\r\n\r\n\r\nfunction arc_EntityParser() {}\r\n\r\narc_EntityParser.ForEntityName = 'ARC';\r\n\r\narc_EntityParser.prototype.parseEntity = function(scanner, curr) {\r\n    var entity, endAngle;\r\n    entity = { type: curr.value };\r\n    curr = scanner.next();\r\n    while(curr !== 'EOF') {\r\n        if(curr.code === 0) break;\r\n\r\n        switch(curr.code) {\r\n            case 10: // X coordinate of point\r\n                entity.center = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            case 40: // radius\r\n                entity.radius = curr.value;\r\n                break;\r\n            case 50: // start angle\r\n                entity.startAngle = Math.PI / 180 * curr.value;\r\n                break;\r\n            case 51: // end angle\r\n                entity.endAngle = Math.PI / 180 * curr.value;\r\n                entity.angleLength = entity.endAngle - entity.startAngle; // angleLength is deprecated\r\n                break;\r\n            default: // ignored attribute\r\n                checkCommonEntityProperties(entity, curr);\r\n                break;\r\n        }\r\n        curr = scanner.next();\r\n    }\r\n    return entity;\r\n};\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/entities/attdef.js\n\r\n\r\n\r\nfunction attdef_EntityParser() {}\r\n\r\nattdef_EntityParser.ForEntityName = 'ATTDEF';\r\n\r\nattdef_EntityParser.prototype.parseEntity = function(scanner, curr) {\r\n    var entity = {\r\n        type: curr.value,\r\n        scale: 1,\r\n        textStyle: 'STANDARD'\r\n     };\r\n    curr = scanner.next();\r\n    while (curr !== 'EOF') {\r\n        if (curr.code === 0) {\r\n            break;\r\n        }\r\n        switch(curr.code) {\r\n            case 1:\r\n                entity.text = curr.value;\r\n                break;\r\n            case 2:\r\n                entity.tag = curr.value;\r\n                break;\r\n            case 3:\r\n                entity.prompt = curr.value;\r\n                break;\r\n            case 7:\r\n                entity.textStyle = curr.value;\r\n                break;\r\n            case 10: // X coordinate of 'first alignment point'\r\n                entity.startPoint = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            case 11: // X coordinate of 'second alignment point'\r\n                entity.endPoint = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            case 39:\r\n                entity.thickness = curr.value;\r\n                break;\r\n            case 40:\r\n                entity.textHeight = curr.value;\r\n                break;\r\n            case 41:\r\n                entity.scale = curr.value;\r\n                break;\r\n            case 50:\r\n                entity.rotation = curr.value;\r\n                break;\r\n            case 51:\r\n                entity.obliqueAngle = curr.value;\r\n                break;\r\n            case 70:\r\n                entity.invisible = !!(curr.value & 0x01);\r\n                entity.constant = !!(curr.value & 0x02);\r\n                entity.verificationRequired = !!(curr.value & 0x04);\r\n                entity.preset = !!(curr.value & 0x08);\r\n                break;\r\n            case 71:\r\n                entity.backwards = !!(curr.value & 0x02);\r\n                entity.mirrored = !!(curr.value & 0x04);\r\n                break;\r\n            case 72:\r\n                // TODO: enum values?\r\n                entity.horizontalJustification = curr.value;\r\n                break;\r\n            case 73:\r\n                entity.fieldLength = curr.value;\r\n                break;\r\n            case 74:\r\n                // TODO: enum values?\r\n                entity.verticalJustification = curr.value;\r\n                break;\r\n            case 100:\r\n                break;\r\n            case 210:\r\n                entity.extrusionDirectionX = curr.value;\r\n                break;\r\n            case 220:\r\n                entity.extrusionDirectionY = curr.value;\r\n                break;\r\n            case 230:\r\n                entity.extrusionDirectionZ = curr.value;\r\n                break;\r\n            default:\r\n                checkCommonEntityProperties(entity, curr);\r\n                break;\r\n        }\r\n        curr = scanner.next();\r\n    }\r\n\r\n    return entity;\r\n};\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/entities/circle.js\n\r\n\r\n\r\nfunction circle_EntityParser() {}\r\n\r\ncircle_EntityParser.ForEntityName = 'CIRCLE';\r\n\r\ncircle_EntityParser.prototype.parseEntity = function(scanner, curr) {\r\n    var entity, endAngle;\r\n    entity = { type: curr.value };\r\n    curr = scanner.next();\r\n    while(curr !== 'EOF') {\r\n        if(curr.code === 0) break;\r\n\r\n        switch(curr.code) {\r\n            case 10: // X coordinate of point\r\n                entity.center = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            case 40: // radius\r\n                entity.radius = curr.value;\r\n                break;\r\n            case 50: // start angle\r\n                entity.startAngle = Math.PI / 180 * curr.value;\r\n                break;\r\n            case 51: // end angle\r\n                endAngle = Math.PI / 180 * curr.value;\r\n                if(endAngle < entity.startAngle)\r\n                    entity.angleLength = endAngle + 2 * Math.PI - entity.startAngle;\r\n                else\r\n                    entity.angleLength = endAngle - entity.startAngle;\r\n                entity.endAngle = endAngle;\r\n                break;\r\n            default: // ignored attribute\r\n                checkCommonEntityProperties(entity, curr);\r\n                break;\r\n        }\r\n        curr = scanner.next();\r\n    }\r\n    return entity;\r\n};\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/entities/dimension.js\n\r\n\r\n\r\nfunction dimension_EntityParser() {}\r\n\r\ndimension_EntityParser.ForEntityName = 'DIMENSION';\r\n\r\ndimension_EntityParser.prototype.parseEntity = function(scanner, curr) {\r\n    var entity;\r\n\t\tentity = { type: curr.value };\r\n\t\tcurr = scanner.next();\r\n\t\twhile(curr !== 'EOF') {\r\n\t\t\tif(curr.code === 0) break;\r\n\r\n\t\t\tswitch(curr.code) {\r\n\t\t\t\tcase 2: // Referenced block name\r\n\t\t\t\t\tentity.block = curr.value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 10: // X coordinate of 'first alignment point'\r\n\t\t\t\t\tentity.anchorPoint = ParseHelpers_parsePoint(scanner);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 11:\r\n\t\t\t\t\tentity.middleOfText = ParseHelpers_parsePoint(scanner);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 12: // Insertion point for clones of a dimension\r\n\t\t\t\t\tentity.insertionPoint = ParseHelpers_parsePoint(scanner);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 13: // Definition point for linear and angular dimensions \r\n\t\t\t\t\tentity.linearOrAngularPoint1 = ParseHelpers_parsePoint(scanner);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 14: // Definition point for linear and angular dimensions \r\n\t\t\t\t\tentity.linearOrAngularPoint2 = ParseHelpers_parsePoint(scanner);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 15: // Definition point for diameter, radius, and angular dimensions\r\n\t\t\t\t\tentity.diameterOrRadiusPoint = ParseHelpers_parsePoint(scanner);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 16: // Point defining dimension arc for angular dimensions\r\n\t\t\t\t\tentity.arcPoint = ParseHelpers_parsePoint(scanner);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 70: // Dimension type\r\n\t\t\t\t\tentity.dimensionType = curr.value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 71: // 5 = Middle center\r\n\t\t\t\t\tentity.attachmentPoint = curr.value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 42: // Actual measurement\r\n\t\t\t\t\tentity.actualMeasurement = curr.value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1: // Text entered by user explicitly\r\n\t\t\t\t\tentity.text = curr.value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 50: // Angle of rotated, horizontal, or vertical dimensions\r\n\t\t\t\t\tentity.angle = curr.value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault: // check common entity attributes\r\n\t\t\t\t\tcheckCommonEntityProperties(entity, curr);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcurr = scanner.next();\r\n\t\t}\r\n\r\n\t\treturn entity;\r\n};\r\n\r\n\r\n\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/entities/ellipse.js\n\r\n\r\n\r\nfunction ellipse_EntityParser() {}\r\n\r\nellipse_EntityParser.ForEntityName = 'ELLIPSE';\r\n\r\nellipse_EntityParser.prototype.parseEntity = function(scanner, curr) {\r\n    var entity;\r\n    entity = { type: curr.value };\r\n    curr = scanner.next();\r\n    while(curr !== 'EOF') {\r\n        if(curr.code === 0) break;\r\n\r\n        switch(curr.code) {\r\n            case 10:\r\n                entity.center = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            case 11:\r\n                entity.majorAxisEndPoint = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            case 40:\r\n                entity.axisRatio = curr.value;\r\n                break;\r\n            case 41:\r\n                entity.startAngle = curr.value;\r\n                break;\r\n            case 42:\r\n                entity.endAngle = curr.value;\r\n                break;\r\n            case 2:\r\n                entity.name = curr.value;\r\n                break;\r\n            default: // check common entity attributes\r\n                checkCommonEntityProperties(entity, curr);\r\n                break;\r\n        }\r\n        \r\n        curr = scanner.next();\r\n    }\r\n\r\n    return entity;\r\n};\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/entities/insert.js\n\r\n\r\n\r\nfunction insert_EntityParser() {}\r\n\r\ninsert_EntityParser.ForEntityName = 'INSERT';\r\n\r\ninsert_EntityParser.prototype.parseEntity = function(scanner, curr) {\r\n    var entity;\r\n    entity = { type: curr.value };\r\n    curr = scanner.next();\r\n    while(curr !== 'EOF') {\r\n        if(curr.code === 0) break;\r\n\r\n        switch(curr.code) {\r\n            case 2:\r\n                entity.name = curr.value;\r\n                break;\r\n            case 41:\r\n                entity.xScale = curr.value;\r\n                break;\r\n            case 42:\r\n                entity.yScale = curr.value;\r\n                break;\r\n            case 43:\r\n                entity.zScale = curr.value;\r\n                break;\r\n            case 10:\r\n                entity.position = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            case 50:\r\n                entity.rotation = curr.value;\r\n                break;\r\n            case 70:\r\n                entity.columnCount = curr.value;\r\n                break;\r\n            case 71:\r\n                entity.rowCount = curr.value;\r\n                break;\r\n            case 44:\r\n                entity.columnSpacing = curr.value;\r\n                break;\r\n            case 45:\r\n                entity.rowSpacing = curr.value;\r\n                break;\r\n            case 210:\r\n                entity.extrusionDirection = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            default: // check common entity attributes\r\n                checkCommonEntityProperties(entity, curr);\r\n                break;\r\n        }\r\n        curr = scanner.next();\r\n    }\r\n\r\n    return entity;\r\n};\r\n\r\n\r\n\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/entities/line.js\n\r\n\r\n\r\nfunction line_EntityParser() {}\r\n\r\nline_EntityParser.ForEntityName = 'LINE';\r\n\r\nline_EntityParser.prototype.parseEntity = function(scanner, curr) {\r\n    var entity = { type: curr.value, vertices: [] };\r\n    curr = scanner.next();\r\n    while(curr !== 'EOF') {\r\n        if(curr.code === 0) break;\r\n\r\n        switch(curr.code) {\r\n            case 10: // X coordinate of point\r\n                entity.vertices.unshift(ParseHelpers_parsePoint(scanner));\r\n                break;\r\n            case 11:\r\n                entity.vertices.push(ParseHelpers_parsePoint(scanner));\r\n                break;\r\n            case 210:\r\n                entity.extrusionDirection = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            case 100:\r\n                break;\r\n            default:\r\n                checkCommonEntityProperties(entity, curr);\r\n                break;\r\n        }\r\n        \r\n        curr = scanner.next();\r\n    }\r\n    return entity;\r\n};\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/entities/lwpolyline.js\n\r\n\r\n\r\nfunction lwpolyline_EntityParser() {}\r\n\r\nlwpolyline_EntityParser.ForEntityName = 'LWPOLYLINE';\r\n\r\nlwpolyline_EntityParser.prototype.parseEntity = function(scanner, curr) {\r\n    var entity = { type: curr.value, vertices: [] },\r\n        numberOfVertices = 0;\r\n    curr = scanner.next();\r\n    while(curr !== 'EOF') {\r\n        if(curr.code === 0) break;\r\n\r\n        switch(curr.code) {\r\n            case 38:\r\n                entity.elevation = curr.value;\r\n                break;\r\n            case 39:\r\n                entity.depth = curr.value;\r\n                break;\r\n            case 70: // 1 = Closed shape, 128 = plinegen?, 0 = default\r\n                entity.shape = ((curr.value & 1) === 1);\r\n                entity.hasContinuousLinetypePattern = ((curr.value & 128) === 128);\r\n                break;\r\n            case 90:\r\n                numberOfVertices = curr.value;\r\n                break;\r\n            case 10: // X coordinate of point\r\n                entity.vertices = parseLWPolylineVertices(numberOfVertices, scanner);\r\n                break;\r\n            case 43:\r\n                if(curr.value !== 0) entity.width = curr.value;\r\n                break;\r\n            case 210:\r\n                entity.extrusionDirectionX = curr.value;\r\n                break;\r\n            case 220:\r\n                entity.extrusionDirectionY = curr.value;\r\n                break;\r\n            case 230:\r\n                entity.extrusionDirectionZ = curr.value;\r\n                break;\r\n            default:\r\n                checkCommonEntityProperties(entity, curr);\r\n                break;\r\n        }\r\n        curr = scanner.next();\r\n    }\r\n    return entity;\r\n};\r\n\r\nfunction parseLWPolylineVertices(n, scanner) {\r\n    if(!n || n <= 0) throw Error('n must be greater than 0 verticies');\r\n    var vertices = [], i;\r\n    var vertexIsStarted = false;\r\n    var vertexIsFinished = false;\r\n    var curr = scanner.lastReadGroup;\r\n\r\n    for(i = 0; i < n; i++) {\r\n        var vertex = {};\r\n        while(curr !== 'EOF') {\r\n            if(curr.code === 0 || vertexIsFinished) break;\r\n\r\n            switch(curr.code) {\r\n                case 10: // X\r\n                    if(vertexIsStarted) {\r\n                        vertexIsFinished = true;\r\n                        continue;\r\n                    }\r\n                    vertex.x = curr.value;\r\n                    vertexIsStarted = true;\r\n                    break;\r\n                case 20: // Y\r\n                    vertex.y = curr.value;\r\n                    break;\r\n                case 30: // Z\r\n                    vertex.z = curr.value;\r\n                    break;\r\n                case 40: // start width\r\n                    vertex.startWidth = curr.value;\r\n                    break;\r\n                case 41: // end width\r\n                    vertex.endWidth = curr.value;\r\n                    break;\r\n                case 42: // bulge\r\n                    if(curr.value != 0) vertex.bulge = curr.value;\r\n                    break;\r\n                default:\r\n                    // if we do not hit known code return vertices.  Code might belong to entity\r\n                    if (vertexIsStarted) {\r\n                        vertices.push(vertex);\r\n                    }\r\n                    scanner.rewind();\r\n                    return vertices;\r\n            }\r\n            curr = scanner.next();\r\n        }\r\n        // See https://groups.google.com/forum/#!topic/comp.cad.autocad/9gn8s5O_w6E\r\n        vertices.push(vertex);\r\n        vertexIsStarted = false;\r\n        vertexIsFinished = false;\r\n    }\r\n    scanner.rewind();\r\n    return vertices;\r\n};\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/entities/mtext.js\n\r\n\r\n\r\nfunction mtext_EntityParser() {}\r\n\r\nmtext_EntityParser.ForEntityName = 'MTEXT';\r\n\r\nmtext_EntityParser.prototype.parseEntity = function(scanner, curr) {\r\n    var entity = { type: curr.value };\r\n\t\tcurr = scanner.next();\r\n    while(curr !== 'EOF') {\r\n        if(curr.code === 0) break;\r\n\r\n        switch(curr.code) {\r\n            case 3:\r\n                entity.text ? entity.text += curr.value : entity.text = curr.value;\r\n                break;\r\n            case 1:\r\n                entity.text ? entity.text += curr.value : entity.text = curr.value;\r\n                break;\r\n            case 10:\r\n                entity.position = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            case 40:\r\n                //Note: this is the text height\r\n                entity.height = curr.value;\r\n                break;\r\n            case 41:\r\n                entity.width = curr.value;\r\n                break;\r\n            case 50:\r\n                entity.rotation = curr.value;\r\n                break;\r\n            case 71:\r\n                entity.attachmentPoint = curr.value;\r\n                break;\r\n            case 72:\r\n                entity.drawingDirection = curr.value;\r\n                break;\r\n            default:\r\n                checkCommonEntityProperties(entity, curr);\r\n                break;\r\n        }\r\n        curr = scanner.next();\r\n    }\r\n    return entity;\r\n};\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/entities/point.js\n\r\n\r\n\r\nfunction point_EntityParser() {}\r\n\r\npoint_EntityParser.ForEntityName = 'POINT';\r\n\r\npoint_EntityParser.prototype.parseEntity = function(scanner, curr) {\r\n    var entity;\r\n    entity = { type: curr.value };\r\n    curr = scanner.next();\r\n    while(curr !== 'EOF') {\r\n        if(curr.code === 0) break;\r\n\r\n        switch(curr.code) {\r\n            case 10:\r\n                entity.position = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            case 39:\r\n                entity.thickness = curr.value;\r\n                break;\r\n            case 210:\r\n                entity.extrusionDirection = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            case 100:\r\n                break;\r\n            default: // check common entity attributes\r\n                checkCommonEntityProperties(entity, curr);\r\n                break;\r\n        }\r\n        curr = scanner.next();\r\n    }\r\n\r\n    return entity;\r\n};\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/entities/vertex.js\n\r\n\r\n\r\nfunction vertex_EntityParser() {}\r\n\r\nvertex_EntityParser.ForEntityName = 'VERTEX';\r\n\r\nvertex_EntityParser.prototype.parseEntity = function(scanner, curr) {\r\n    var entity = { type: curr.value };\r\n    curr = scanner.next();\r\n    while(curr !== 'EOF') {\r\n        if(curr.code === 0) break;\r\n\r\n        switch(curr.code) {\r\n            case 10:\t// X\r\n                entity.x = curr.value;\r\n                break;\r\n            case 20: // Y\r\n                entity.y = curr.value;\r\n                break;\r\n            case 30: // Z\r\n                entity.z = curr.value;\r\n                break;\r\n            case 40: // start width\r\n                break;\r\n            case 41: // end width\r\n                break;\r\n            case 42: // bulge\r\n                if(curr.value != 0) entity.bulge = curr.value;\r\n                break;\r\n            case 70: // flags\r\n                entity.curveFittingVertex = (curr.value & 1) !== 0;\r\n                entity.curveFitTangent = (curr.value & 2) !== 0;\r\n                entity.splineVertex = (curr.value & 8) !== 0;\r\n                entity.splineControlPoint = (curr.value & 16) !== 0;\r\n                entity.threeDPolylineVertex = (curr.value & 32) !== 0;\r\n                entity.threeDPolylineMesh = (curr.value & 64) !== 0;\r\n                entity.polyfaceMeshVertex = (curr.value & 128) !== 0;\r\n                break;\r\n            case 50: // curve fit tangent direction\r\n                break;\r\n            case 71: // polyface mesh vertex index\r\n                entity.faceA = curr.value;\r\n                break;\r\n            case 72: // polyface mesh vertex index\r\n                entity.faceB = curr.value;\r\n                break;\r\n            case 73: // polyface mesh vertex index\r\n                entity.faceC = curr.value;\r\n                break;\r\n            case 74: // polyface mesh vertex index\r\n                entity.faceD = curr.value;\r\n                break;\r\n            default:\r\n                checkCommonEntityProperties(entity, curr);\r\n                break;\r\n        }\r\n        \r\n        curr = scanner.next();\r\n    }\r\n    return entity;\r\n};\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/entities/polyline.js\n\r\n\r\n\r\n\r\nfunction polyline_EntityParser() {}\r\n\r\npolyline_EntityParser.ForEntityName = 'POLYLINE';\r\n\r\npolyline_EntityParser.prototype.parseEntity = function(scanner, curr) {\r\n    var entity = { type: curr.value, vertices: [] };\r\n\t\tcurr = scanner.next();\r\n\t\twhile(curr !== 'EOF') {\r\n\t\t\tif(curr.code === 0) break;\r\n\r\n\t\t\tswitch(curr.code) {\r\n                case 10: // always 0\r\n                    break;\r\n\t\t\t\tcase 20: // always 0\r\n                    break;\r\n\t\t\t\tcase 30: // elevation\r\n                    break;\r\n\t\t\t\tcase 39: // thickness\r\n                    entity.thickness = curr.value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 40: // start width\r\n                    break;\r\n\t\t\t\tcase 41: // end width\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 70:\r\n\t\t\t\t\tentity.shape = (curr.value & 1) !== 0;\r\n                    entity.includesCurveFitVertices = (curr.value & 2) !== 0;\r\n                    entity.includesSplineFitVertices = (curr.value & 4) !== 0;\r\n                    entity.is3dPolyline = (curr.value & 8) !== 0;\r\n                    entity.is3dPolygonMesh = (curr.value & 16) !== 0;\r\n                    entity.is3dPolygonMeshClosed = (curr.value & 32) !== 0; // 32 = The polygon mesh is closed in the N direction\r\n                    entity.isPolyfaceMesh = (curr.value & 64) !== 0;\r\n                    entity.hasContinuousLinetypePattern = (curr.value & 128) !== 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 71: // Polygon mesh M vertex count\r\n                    break;\r\n\t\t\t\tcase 72: // Polygon mesh N vertex count\r\n                    break;\r\n\t\t\t\tcase 73: // Smooth surface M density\r\n                    break;\r\n\t\t\t\tcase 74: // Smooth surface N density\r\n                    break;\r\n\t\t\t\tcase 75: // Curves and smooth surface type\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 210:\r\n                    entity.extrusionDirection = ParseHelpers_parsePoint(scanner);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tcheckCommonEntityProperties(entity, curr);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcurr = scanner.next();\r\n\t\t}\r\n\r\n\t\tentity.vertices = parsePolylineVertices(scanner, curr);\r\n\r\n\t\treturn entity;\r\n};\r\n\r\nfunction parsePolylineVertices(scanner, curr) {\r\n    var vertexParser = new vertex_EntityParser();\r\n\r\n    var vertices = [];\r\n    while (!scanner.isEOF()) {\r\n        if (curr.code === 0) {\r\n            if (curr.value === 'VERTEX') {\r\n                vertices.push(vertexParser.parseEntity(scanner, curr));\r\n                curr = scanner.lastReadGroup;\r\n            } else if (curr.value === 'SEQEND') {\r\n                parseSeqEnd(scanner, curr);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return vertices;\r\n};\r\n\r\nfunction parseSeqEnd(scanner, curr) {\r\n    var entity = { type: curr.value };\r\n    curr = scanner.next();\r\n    while(curr != 'EOF') {\r\n        if (curr.code == 0) break;\r\n        checkCommonEntityProperties(entity, curr);\r\n        curr = scanner.next();\r\n    }\r\n\r\n    return entity;\r\n};\r\n\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/entities/solid.js\n\r\n\r\n\r\nfunction solid_EntityParser() {}\r\n\r\nsolid_EntityParser.ForEntityName = 'SOLID';\r\n\r\nsolid_EntityParser.prototype.parseEntity = function(scanner, currentGroup) {\r\n    var entity;\r\n    entity = { type: currentGroup.value };\r\n    entity.points = [];\r\n    currentGroup = scanner.next();\r\n    while(currentGroup !== 'EOF') {\r\n        if(currentGroup.code === 0) break;\r\n\r\n        switch(currentGroup.code) {\r\n            case 10:\r\n                entity.points[0] = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            case 11:\r\n                entity.points[1] = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            case 12:\r\n                entity.points[2] = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            case 13:\r\n                entity.points[3] = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            case 210:\r\n                entity.extrusionDirection = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            default: // check common entity attributes\r\n                checkCommonEntityProperties(entity, currentGroup);\r\n                break;\r\n        }\r\n        currentGroup = scanner.next();\r\n    }\r\n\r\n    return entity;\r\n};\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/entities/spline.js\n\r\n\r\n\r\nfunction spline_EntityParser() {}\r\n\r\nspline_EntityParser.ForEntityName = 'SPLINE';\r\n\r\nspline_EntityParser.prototype.parseEntity = function(scanner, curr) {\r\n    var entity;\r\n    entity = { type: curr.value };\r\n    curr = scanner.next();\r\n    while(curr !== 'EOF')\r\n    {\r\n        if(curr.code === 0) break;\r\n\r\n        switch(curr.code) {\r\n            case 10:\r\n                if (!entity.controlPoints) entity.controlPoints = [];\r\n                entity.controlPoints.push(ParseHelpers_parsePoint(scanner));\r\n                break;\r\n            case 11:\r\n                if (!entity.fitPoints) entity.fitPoints = [];\r\n                entity.fitPoints.push(ParseHelpers_parsePoint(scanner));\r\n                break;\r\n            case 12:\r\n                entity.startTangent = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            case 13:\r\n                entity.endTangent = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            case 40:\r\n                if (!entity.knotValues) entity.knotValues = [];\r\n                entity.knotValues.push(curr.value);\r\n                break;\r\n            case 70:\r\n                if ((curr.value & 1) != 0) entity.closed = true;\r\n                if ((curr.value & 2) != 0) entity.periodic = true;\r\n                if ((curr.value & 4) != 0) entity.rational = true;\r\n                if ((curr.value & 8) != 0) entity.planar = true;\r\n                if ((curr.value & 16) != 0) \r\n                {\r\n                    entity.planar = true;\r\n                    entity.linear = true;\r\n                }\r\n                break;\r\n                \r\n            case 71:\r\n                entity.degreeOfSplineCurve = curr.value;\r\n                break;\r\n            case 72:\r\n                entity.numberOfKnots = curr.value;\r\n                break;\r\n            case 73:\r\n                entity.numberOfControlPoints = curr.value;\r\n                break;\r\n            case 74:\r\n                entity.numberOfFitPoints = curr.value;\r\n                break;\r\n            case 210:\r\n                entity.normalVector = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            default:\r\n                checkCommonEntityProperties(entity, curr);\r\n                break;\r\n        }\r\n        curr = scanner.next();\r\n    }\r\n\r\n    return entity;\r\n};\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/entities/text.js\n\r\n\r\n\r\nfunction text_EntityParser() {}\r\n\r\ntext_EntityParser.ForEntityName = 'TEXT';\r\n\r\ntext_EntityParser.prototype.parseEntity = function(scanner, curr) {\r\n    var entity;\r\n\t\tentity = { type: curr.value };\r\n    curr = scanner.next();\r\n    while(curr !== 'EOF') {\r\n        if(curr.code === 0) break;\r\n        switch(curr.code) {\r\n            case 10: // X coordinate of 'first alignment point'\r\n                entity.startPoint = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            case 11: // X coordinate of 'second alignment point'\r\n                entity.endPoint = ParseHelpers_parsePoint(scanner);\r\n                break;\r\n            case 40: // Text height\r\n                entity.textHeight = curr.value;\r\n                break;\r\n            case 41:\r\n                entity.xScale = curr.value;\r\n                break;\r\n            case 50: // Rotation in degrees\r\n                entity.rotation = curr.value;\r\n                break;\r\n            case 1: // Text\r\n                entity.text = curr.value;\r\n                break;\r\n            // NOTE: 72 and 73 are meaningless without 11 (second alignment point)\r\n            case 72: // Horizontal alignment\r\n                entity.halign = curr.value;\r\n                break;\r\n            case 73: // Vertical alignment\r\n                entity.valign = curr.value;\r\n                break;\r\n            default: // check common entity attributes\r\n                checkCommonEntityProperties(entity, curr);\r\n                break;\r\n        }\r\n        curr = scanner.next();\r\n    }\r\n    return entity;\r\n};\n// EXTERNAL MODULE: ./node_modules/loglevel/lib/loglevel.js\nvar loglevel = __webpack_require__(1);\nvar loglevel_default = /*#__PURE__*/__webpack_require__.n(loglevel);\n\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/DxfParser.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//import Vertex from './entities/';\r\n\r\n\r\n\r\n//log.setLevel('trace');\r\n//log.setLevel('debug');\r\n//log.setLevel('info');\r\n//log.setLevel('warn');\r\nloglevel_default.a.setLevel('error');\r\n//log.setLevel('silent');\r\n\r\nfunction registerDefaultEntityHandlers(dxfParser) {\r\n\t// Supported entities here (some entity code is still being refactored into this flow)\r\n\tdxfParser.registerEntityHandler(EntityParser);\r\n\tdxfParser.registerEntityHandler(arc_EntityParser);\r\n\tdxfParser.registerEntityHandler(attdef_EntityParser);\r\n\tdxfParser.registerEntityHandler(circle_EntityParser);\r\n\tdxfParser.registerEntityHandler(dimension_EntityParser);\r\n\tdxfParser.registerEntityHandler(ellipse_EntityParser);\r\n\tdxfParser.registerEntityHandler(insert_EntityParser);\r\n\tdxfParser.registerEntityHandler(line_EntityParser);\r\n\tdxfParser.registerEntityHandler(lwpolyline_EntityParser);\r\n\tdxfParser.registerEntityHandler(mtext_EntityParser);\r\n\tdxfParser.registerEntityHandler(point_EntityParser);\r\n\tdxfParser.registerEntityHandler(polyline_EntityParser);\r\n\tdxfParser.registerEntityHandler(solid_EntityParser);\r\n\tdxfParser.registerEntityHandler(spline_EntityParser);\r\n\tdxfParser.registerEntityHandler(text_EntityParser);\r\n\t//dxfParser.registerEntityHandler(require('./entities/vertex'));\r\n}\r\n\r\nfunction DxfParser() {\r\n\tthis._entityHandlers = {};\r\n\r\n\tregisterDefaultEntityHandlers(this);\r\n}\r\n\r\nDxfParser.prototype.parse = function(source, done) {\r\n\tthrow new Error(\"read() not implemented. Use readSync()\");\r\n};\r\n\r\nDxfParser.prototype.registerEntityHandler = function(handlerType) {\r\n\tvar instance = new handlerType();\r\n\tthis._entityHandlers[handlerType.ForEntityName] = instance;\r\n}\r\n\r\nDxfParser.prototype.parseSync = function(source) {\r\n\tif(typeof(source) === 'string') {\r\n\t\treturn this._parse(source);\r\n\t}else {\r\n\t\tconsole.error('Cannot read dxf source of type `' + typeof(source));\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nDxfParser.prototype.parseStream = function(stream, done) {\r\n\r\n\tvar dxfString = \"\";\r\n\tvar self = this;\r\n\r\n\tstream.on('data', onData);\r\n\tstream.on('end', onEnd);\r\n\tstream.on('error', onError);\r\n\r\n\tfunction onData(chunk) {\r\n\t\tdxfString += chunk;\r\n\t}\r\n\r\n\tfunction onEnd() {\r\n\t\ttry {\r\n\t\t\tvar dxf = self._parse(dxfString);\r\n\t\t}catch(err) {\r\n\t\t\treturn done(err);\r\n\t\t}\r\n\t\tdone(null, dxf);\r\n\t}\r\n\r\n\tfunction onError(err) {\r\n\t\tdone(err);\r\n\t}\r\n};\r\n\r\nDxfParser.prototype._parse = function(dxfString) {\r\n\tvar scanner, curr, dxf = {}, lastHandle = 0;\r\n\tvar dxfLinesArray = dxfString.split(/\\r\\n|\\r|\\n/g);\r\n\r\n\tscanner = new DxfArrayScanner(dxfLinesArray);\r\n\tif(!scanner.hasNext()) throw Error('Empty file');\r\n\r\n\tvar self = this;\r\n\r\n\tvar parseAll = function() {\r\n\t\tcurr = scanner.next();\r\n\t\twhile(!scanner.isEOF()) {\r\n\t\t\tif(curr.code === 0 && curr.value === 'SECTION') {\r\n\t\t\t\tcurr = scanner.next();\r\n\r\n\t\t\t\t// Be sure we are reading a section code\r\n\t\t\t\tif (curr.code !== 2) {\r\n\t\t\t\t\tconsole.error('Unexpected code %s after 0:SECTION', debugCode(curr));\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (curr.value === 'HEADER') {\r\n\t\t\t\t\tloglevel_default.a.debug('> HEADER');\r\n\t\t\t\t\tdxf.header = parseHeader();\r\n\t\t\t\t\tloglevel_default.a.debug('<');\r\n\t\t\t\t} else if (curr.value === 'BLOCKS') {\r\n\t\t\t\t\tloglevel_default.a.debug('> BLOCKS');\r\n\t\t\t\t\tdxf.blocks = parseBlocks();\r\n\t\t\t\t\tloglevel_default.a.debug('<');\r\n\t\t\t\t} else if(curr.value === 'ENTITIES') {\r\n\t\t\t\t\tloglevel_default.a.debug('> ENTITIES');\r\n\t\t\t\t\tdxf.entities = parseEntities(false);\r\n\t\t\t\t\tloglevel_default.a.debug('<');\r\n\t\t\t\t} else if(curr.value === 'TABLES') {\r\n\t\t\t\t\tloglevel_default.a.debug('> TABLES');\r\n\t\t\t\t\tdxf.tables = parseTables();\r\n\t\t\t\t\tloglevel_default.a.debug('<');\r\n\t\t\t\t} else if(curr.value === 'EOF') {\r\n\t\t\t\t\tloglevel_default.a.debug('EOF');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tloglevel_default.a.warn('Skipping section \\'%s\\'', curr.value);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tcurr = scanner.next();\r\n\t\t\t}\r\n\t\t\t// If is a new section\r\n\t\t}\r\n\t};\r\n\r\n\tvar groupIs = function(code, value) {\r\n\t\treturn curr.code === code && curr.value === value;\r\n\t};\r\n\r\n\t/**\r\n\t *\r\n\t * @return {object} header\r\n\t */\r\n\tvar parseHeader = function() {\r\n\t\t// interesting variables:\r\n\t\t//  $ACADVER, $VIEWDIR, $VIEWSIZE, $VIEWCTR, $TDCREATE, $TDUPDATE\r\n\t\t// http://www.autodesk.com/techpubs/autocad/acadr14/dxf/header_section_al_u05_c.htm\r\n\t\t// Also see VPORT table entries\r\n\t\tvar currVarName = null, currVarValue = null;\r\n\t\tvar header = {};\r\n\t\t// loop through header variables\r\n\t\tcurr = scanner.next();\r\n\r\n\t\twhile(true) {\r\n\t\t\tif(groupIs(0, 'ENDSEC')) {\r\n\t\t\t\tif(currVarName) header[currVarName] = currVarValue;\r\n\t\t\t\tbreak;\r\n\t\t\t} else if(curr.code === 9) {\r\n\t\t\t\tif(currVarName) header[currVarName] = currVarValue;\r\n\t\t\t\tcurrVarName = curr.value;\r\n\t\t\t\t// Filter here for particular variables we are interested in\r\n\t\t\t} else {\r\n\t\t\t\tif(curr.code === 10) {\r\n\t\t\t\t\tcurrVarValue = { x: curr.value };\r\n\t\t\t\t} else if(curr.code === 20) {\r\n\t\t\t\t\tcurrVarValue.y = curr.value;\r\n\t\t\t\t} else if(curr.code === 30) {\r\n\t\t\t\t\tcurrVarValue.z = curr.value;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcurrVarValue = curr.value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcurr = scanner.next();\r\n\t\t}\r\n\t\t// console.log(util.inspect(header, { colors: true, depth: null }));\r\n\t\tcurr = scanner.next(); // swallow up ENDSEC\r\n\t\treturn header;\r\n\t};\r\n\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tvar parseBlocks = function() {\r\n\t\tvar blocks = {}, block;\r\n\r\n        curr = scanner.next();\r\n\r\n\t\twhile(curr.value !== 'EOF') {\r\n\t\t\tif(groupIs(0, 'ENDSEC')) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif(groupIs(0, 'BLOCK')) {\r\n\t\t\t\tloglevel_default.a.debug('block {');\r\n\t\t\t\tblock = parseBlock();\r\n\t\t\t\tloglevel_default.a.debug('}');\r\n\t\t\t\tensureHandle(block);\r\n                if(!block.name)\r\n                    loglevel_default.a.error('block with handle \"' + block.handle + '\" is missing a name.');\r\n\t\t\t\telse\r\n                    blocks[block.name] = block;\r\n\t\t\t} else {\r\n\t\t\t\tlogUnhandledGroup(curr);\r\n\t\t\t\tcurr = scanner.next();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn blocks;\r\n\t};\r\n\r\n\tvar parseBlock = function() {\r\n\t\tvar block = {};\r\n\t\tcurr = scanner.next();\r\n\r\n\t\twhile(curr.value !== 'EOF') {\r\n\t\t\tswitch(curr.code) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tblock.xrefPath = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tblock.name = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tblock.name2 = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tblock.handle = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 8:\r\n\t\t\t\t\tblock.layer = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 10:\r\n\t\t\t\t\tblock.position = parsePoint();\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 67:\r\n\t\t\t\t\tblock.paperSpace = (curr.value && curr.value == 1) ? true : false;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 70:\r\n\t\t\t\t\tif (curr.value != 0) {\r\n\t\t\t\t\t\t//if(curr.value & BLOCK_ANONYMOUS_FLAG) console.log('  Anonymous block');\r\n\t\t\t\t\t\t//if(curr.value & BLOCK_NON_CONSTANT_FLAG) console.log('  Non-constant attributes');\r\n\t\t\t\t\t\t//if(curr.value & BLOCK_XREF_FLAG) console.log('  Is xref');\r\n\t\t\t\t\t\t//if(curr.value & BLOCK_XREF_OVERLAY_FLAG) console.log('  Is xref overlay');\r\n\t\t\t\t\t\t//if(curr.value & BLOCK_EXTERNALLY_DEPENDENT_FLAG) console.log('  Is externally dependent');\r\n\t\t\t\t\t\t//if(curr.value & BLOCK_RESOLVED_OR_DEPENDENT_FLAG) console.log('  Is resolved xref or dependent of an xref');\r\n\t\t\t\t\t\t//if(curr.value & BLOCK_REFERENCED_XREF) console.log('  This definition is a referenced xref');\r\n\t\t\t\t\t\tblock.type = curr.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 100:\r\n\t\t\t\t\t// ignore class markers\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 330:\r\n\t\t\t\t\tblock.ownerHandle = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tif(curr.value == 'ENDBLK')\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tblock.entities = parseEntities(true);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tlogUnhandledGroup(curr);\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t}\r\n\r\n\t\t\tif(groupIs(0, 'ENDBLK')) {\r\n\t\t\t\tcurr = scanner.next();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn block;\r\n\t};\r\n\r\n\t/**\r\n\t * parseTables\r\n\t * @return {Object} Object representing tables\r\n\t */\r\n\tvar parseTables = function() {\r\n\t\tvar tables = {};\r\n\t\tcurr = scanner.next();\r\n\t\twhile(curr.value !== 'EOF') {\r\n\t\t\tif(groupIs(0, 'ENDSEC'))\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tif(groupIs(0, 'TABLE')) {\r\n\t\t\t\tcurr = scanner.next();\r\n\r\n\t\t\t\tvar tableDefinition = tableDefinitions[curr.value];\r\n\t\t\t\tif(tableDefinition) {\r\n\t\t\t\t\tloglevel_default.a.debug(curr.value + ' Table {');\r\n\t\t\t\t\ttables[tableDefinitions[curr.value].tableName] = parseTable();\r\n\t\t\t\t\tloglevel_default.a.debug('}');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tloglevel_default.a.debug('Unhandled Table ' + curr.value);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// else ignored\r\n\t\t\t\tcurr = scanner.next();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcurr = scanner.next();\r\n\t\treturn tables;\r\n\t};\r\n\r\n\tconst END_OF_TABLE_VALUE = 'ENDTAB';\r\n\r\n\tvar parseTable = function() {\r\n\t\tvar tableDefinition = tableDefinitions[curr.value],\r\n\t\t\ttable = {},\r\n\t\t\texpectedCount = 0,\r\n\t\t\tactualCount;\r\n\r\n\t\tcurr = scanner.next();\r\n\t\twhile(!groupIs(0, END_OF_TABLE_VALUE)) {\r\n\r\n\t\t\tswitch(curr.code) {\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\ttable.handle = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 330:\r\n\t\t\t\t\ttable.ownerHandle = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 100:\r\n\t\t\t\t\tif(curr.value === 'AcDbSymbolTable') {\r\n\t\t\t\t\t\t// ignore\r\n\t\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tlogUnhandledGroup(curr);\r\n\t\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 70:\r\n\t\t\t\t\texpectedCount = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tif(curr.value === tableDefinition.dxfSymbolName) {\r\n\t\t\t\t\t\ttable[tableDefinition.tableRecordsProperty] = tableDefinition.parseTableRecords();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlogUnhandledGroup(curr);\r\n\t\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tlogUnhandledGroup(curr);\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar tableRecords = table[tableDefinition.tableRecordsProperty];\r\n\t\tif(tableRecords) {\r\n\t\t\tif(tableRecords.constructor === Array){\r\n\t\t\t\tactualCount = tableRecords.length;\r\n\t\t\t} else if(typeof(tableRecords) === 'object') {\r\n\t\t\t\tactualCount = Object.keys(tableRecords).length;\r\n\t\t\t}\r\n\t\t\tif(expectedCount !== actualCount) loglevel_default.a.warn('Parsed ' + actualCount + ' ' + tableDefinition.dxfSymbolName + '\\'s but expected ' + expectedCount);\r\n\t\t}\r\n\t\tcurr = scanner.next();\r\n\t\treturn table;\r\n\t};\r\n\r\n\tvar parseViewPortRecords = function() {\r\n\t\tvar viewPorts = [], // Multiple table entries may have the same name indicating a multiple viewport configuration\r\n\t\t\tviewPort = {};\r\n\r\n\t\tloglevel_default.a.debug('ViewPort {');\r\n\t\tcurr = scanner.next();\r\n\t\twhile(!groupIs(0, END_OF_TABLE_VALUE)) {\r\n\r\n\t\t\tswitch(curr.code) {\r\n\t\t\t\tcase 2: // layer name\r\n\t\t\t\t\tviewPort.name = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 10:\r\n\t\t\t\t\tviewPort.lowerLeftCorner = parsePoint();\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 11:\r\n\t\t\t\t\tviewPort.upperRightCorner = parsePoint();\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 12:\r\n\t\t\t\t\tviewPort.center = parsePoint();\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 13:\r\n\t\t\t\t\tviewPort.snapBasePoint = parsePoint();\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 14:\r\n\t\t\t\t\tviewPort.snapSpacing = parsePoint();\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 15:\r\n\t\t\t\t\tviewPort.gridSpacing = parsePoint();\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 16:\r\n\t\t\t\t\tviewPort.viewDirectionFromTarget = parsePoint();\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 17:\r\n\t\t\t\t\tviewPort.viewTarget = parsePoint();\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 42:\r\n\t\t\t\t\tviewPort.lensLength = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 43:\r\n\t\t\t\t\tviewPort.frontClippingPlane = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 44:\r\n\t\t\t\t\tviewPort.backClippingPlane = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 45:\r\n\t\t\t\t\tviewPort.viewHeight = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 50:\r\n\t\t\t\t\tviewPort.snapRotationAngle = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 51:\r\n\t\t\t\t\tviewPort.viewTwistAngle = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n                case 79:\r\n                    viewPort.orthographicType = curr.value;\r\n                    curr = scanner.next();\r\n                    break;\r\n\t\t\t\tcase 110:\r\n\t\t\t\t\tviewPort.ucsOrigin = parsePoint();\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 111:\r\n\t\t\t\t\tviewPort.ucsXAxis = parsePoint();\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 112:\r\n\t\t\t\t\tviewPort.ucsYAxis = parsePoint();\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 110:\r\n\t\t\t\t\tviewPort.ucsOrigin = parsePoint();\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 281:\r\n\t\t\t\t\tviewPort.renderMode = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 281:\r\n\t\t\t\t\t// 0 is one distant light, 1 is two distant lights\r\n\t\t\t\t\tviewPort.defaultLightingType = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 292:\r\n\t\t\t\t\tviewPort.defaultLightingOn = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 330:\r\n\t\t\t\t\tviewPort.ownerHandle = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 63: // These are all ambient color. Perhaps should be a gradient when multiple are set.\r\n\t\t\t\tcase 421:\r\n\t\t\t\tcase 431:\r\n\t\t\t\t\tviewPort.ambientColor = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\t// New ViewPort\r\n\t\t\t\t\tif(curr.value === 'VPORT') {\r\n\t\t\t\t\t\tloglevel_default.a.debug('}');\r\n\t\t\t\t\t\tviewPorts.push(viewPort);\r\n\t\t\t\t\t\tloglevel_default.a.debug('ViewPort {');\r\n\t\t\t\t\t\tviewPort = {};\r\n\t\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tlogUnhandledGroup(curr);\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Note: do not call scanner.next() here,\r\n\t\t//  parseTable() needs the current group\r\n\t\tloglevel_default.a.debug('}');\r\n\t\tviewPorts.push(viewPort);\r\n\r\n\t\treturn viewPorts;\r\n\t};\r\n\r\n\tvar parseLineTypes = function() {\r\n\t\tvar ltypes = {},\r\n\t\t\tltypeName,\r\n\t\t\tltype = {},\r\n\t\t\tlength;\r\n\r\n\t\tloglevel_default.a.debug('LType {');\r\n\t\tcurr = scanner.next();\r\n\t\twhile(!groupIs(0, 'ENDTAB')) {\r\n\r\n\t\t\tswitch(curr.code) {\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tltype.name = curr.value;\r\n\t\t\t\t\tltypeName = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tltype.description = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 73: // Number of elements for this line type (dots, dashes, spaces);\r\n\t\t\t\t\tlength = curr.value;\r\n\t\t\t\t\tif(length > 0) ltype.pattern = [];\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 40: // total pattern length\r\n\t\t\t\t\tltype.patternLength = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 49:\r\n\t\t\t\t\tltype.pattern.push(curr.value);\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tloglevel_default.a.debug('}');\r\n\t\t\t\t\tif(length > 0 && length !== ltype.pattern.length) loglevel_default.a.warn('lengths do not match on LTYPE pattern');\r\n\t\t\t\t\tltypes[ltypeName] = ltype;\r\n\t\t\t\t\tltype = {};\r\n\t\t\t\t\tloglevel_default.a.debug('LType {');\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tloglevel_default.a.debug('}');\r\n\t\tltypes[ltypeName] = ltype;\r\n\t\treturn ltypes;\r\n\t};\r\n\r\n\tvar parseLayers = function() {\r\n\t\tvar layers = {},\r\n\t\t\tlayerName,\r\n\t\t\tlayer = {};\r\n\r\n\t\tloglevel_default.a.debug('Layer {');\r\n\t\tcurr = scanner.next();\r\n\t\twhile(!groupIs(0, 'ENDTAB')) {\r\n\r\n\t\t\tswitch(curr.code) {\r\n\t\t\t\tcase 2: // layer name\r\n\t\t\t\t\tlayer.name = curr.value;\r\n\t\t\t\t\tlayerName = curr.value;\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 62: // color, visibility\r\n\t\t\t\t\tlayer.visible = curr.value >= 0;\r\n\t\t\t\t\t// TODO 0 and 256 are BYBLOCK and BYLAYER respectively. Need to handle these values for layers?.\r\n\t\t\t\t\tlayer.colorIndex = Math.abs(curr.value);\r\n\t\t\t\t\tlayer.color = DxfParser_getAcadColor(layer.colorIndex);\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 70: // frozen layer\r\n\t\t\t\t\tlayer.frozen = ((curr.value & 1) != 0 || (curr.value & 2) != 0);\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\t// New Layer\r\n\t\t\t\t\tif(curr.value === 'LAYER') {\r\n\t\t\t\t\t\tloglevel_default.a.debug('}');\r\n\t\t\t\t\t\tlayers[layerName] = layer;\r\n\t\t\t\t\t\tloglevel_default.a.debug('Layer {');\r\n\t\t\t\t\t\tlayer = {};\r\n\t\t\t\t\t\tlayerName = undefined;\r\n\t\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tlogUnhandledGroup(curr);\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Note: do not call scanner.next() here,\r\n\t\t//  parseLayerTable() needs the current group\r\n\t\tloglevel_default.a.debug('}');\r\n\t\tlayers[layerName] = layer;\r\n\r\n\t\treturn layers;\r\n\t};\r\n\r\n\tvar tableDefinitions = {\r\n\t\tVPORT: {\r\n\t\t\ttableRecordsProperty: 'viewPorts',\r\n\t\t\ttableName: 'viewPort',\r\n\t\t\tdxfSymbolName: 'VPORT',\r\n\t\t\tparseTableRecords: parseViewPortRecords\r\n\t\t},\r\n\t\tLTYPE: {\r\n\t\t\ttableRecordsProperty: 'lineTypes',\r\n\t\t\ttableName: 'lineType',\r\n\t\t\tdxfSymbolName: 'LTYPE',\r\n\t\t\tparseTableRecords: parseLineTypes\r\n\t\t},\r\n\t\tLAYER: {\r\n\t\t\ttableRecordsProperty: 'layers',\r\n\t\t\ttableName: 'layer',\r\n\t\t\tdxfSymbolName: 'LAYER',\r\n\t\t\tparseTableRecords: parseLayers\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Is called after the parser first reads the 0:ENTITIES group. The scanner\r\n\t * should be on the start of the first entity already.\r\n\t * @return {Array} the resulting entities\r\n\t */\r\n\tvar parseEntities = function(forBlock) {\r\n\t\tvar entities = [];\r\n\r\n\t\tvar endingOnValue = forBlock ? 'ENDBLK' : 'ENDSEC';\r\n\r\n\t\tif (!forBlock) {\r\n\t\t\tcurr = scanner.next();\r\n\t\t}\r\n\t\twhile(true) {\r\n\r\n\t\t\tif(curr.code === 0) {\r\n\t\t\t\tif(curr.value === endingOnValue) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar entity;\r\n\t\t\t\tvar handler = self._entityHandlers[curr.value];\r\n\t\t\t\tif(handler != null) {\r\n\t\t\t\t\tloglevel_default.a.debug(curr.value + ' {');\r\n\t\t\t\t\tentity = handler.parseEntity(scanner, curr);\r\n\t\t\t\t\tcurr = scanner.lastReadGroup;\r\n\t\t\t\t\tloglevel_default.a.debug('}');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tloglevel_default.a.warn('Unhandled entity ' + curr.value);\r\n\t\t\t\t\tcurr = scanner.next();\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tensureHandle(entity);\r\n\t\t\t\tentities.push(entity);\r\n\t\t\t} else {\r\n\t\t\t\t// ignored lines from unsupported entity\r\n\t\t\t\tcurr = scanner.next();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(endingOnValue == 'ENDSEC') curr = scanner.next(); // swallow up ENDSEC, but not ENDBLK\r\n\t\treturn entities;\r\n\t};\r\n\r\n\t/**\r\n\t * Parses a 2D or 3D point, returning it as an object with x, y, and\r\n\t * (sometimes) z property if it is 3D. It is assumed the current group\r\n\t * is x of the point being read in, and scanner.next() will return the\r\n\t * y. The parser will determine if there is a z point automatically.\r\n\t * @return {Object} The 2D or 3D point as an object with x, y[, z]\r\n\t */\r\n\tvar parsePoint = function() {\r\n\t\tvar point = {},\r\n\t\t\tcode = curr.code;\r\n\r\n\t\tpoint.x = curr.value;\r\n\r\n\t\tcode += 10;\r\n\t\tcurr = scanner.next();\r\n\t\tif(curr.code != code)\r\n\t\t\tthrow new Error('Expected code for point value to be ' + code +\r\n\t\t\t' but got ' + curr.code + '.');\r\n\t\tpoint.y = curr.value;\r\n\r\n\t\tcode += 10;\r\n\t\tcurr = scanner.next();\r\n\t\tif(curr.code != code)\r\n\t\t{\r\n\t\t\tscanner.rewind();\r\n\t\t\treturn point;\r\n\t\t}\r\n\t\tpoint.z = curr.value;\r\n\t\t\r\n\t\treturn point;\r\n\t};\r\n\r\n\tvar ensureHandle = function(entity) {\r\n\t\tif(!entity) throw new TypeError('entity cannot be undefined or null');\r\n\r\n\t\tif(!entity.handle) entity.handle = lastHandle++;\r\n\t};\r\n\r\n\tparseAll();\r\n\treturn dxf;\r\n};\r\n\r\nfunction logUnhandledGroup(curr) {\r\n\tloglevel_default.a.debug('unhandled group ' + debugCode(curr));\r\n}\r\n\r\n\r\nfunction debugCode(curr) {\r\n\treturn curr.code + ':' + curr.value;\r\n}\r\n\r\n/**\r\n * Returns the truecolor value of the given AutoCad color index value\r\n * @return {Number} truecolor value as a number\r\n */\r\nfunction DxfParser_getAcadColor(index) {\r\n\treturn AutoCadColorIndex[index];\r\n}\r\n\r\nconst BLOCK_ANONYMOUS_FLAG = 1;\r\nconst BLOCK_NON_CONSTANT_FLAG = 2;\r\nconst BLOCK_XREF_FLAG = 4;\r\nconst BLOCK_XREF_OVERLAY_FLAG = 8;\r\nconst BLOCK_EXTERNALLY_DEPENDENT_FLAG = 16;\r\nconst BLOCK_RESOLVED_OR_DEPENDENT_FLAG = 32;\r\nconst BLOCK_REFERENCED_XREF = 64;\r\n\r\n\r\n/* Notes */\r\n// Code 6 of an entity indicates inheritance of properties (eg. color).\r\n//   BYBLOCK means inherits from block\r\n//   BYLAYER (default) mean inherits from layer\r\n\n// CONCATENATED MODULE: ./node_modules/dxf-parser/src/index.js\n\r\n\r\n/* harmony default export */ var src = (DxfParser);\n// CONCATENATED MODULE: ./src/OrbitControls.js\n/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n */\n/*global THREE, console */\n\n// This set of controls performs orbiting, dollying (zooming), and panning. It maintains\n// the \"up\" direction as +Y, unlike the TrackballControls. Touch on tablet and phones is\n// supported.\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\n//\n// This is a drop-in replacement for (most) TrackballControls used in examples.\n// That is, include this js file and wherever you see:\n//    \tcontrols = new THREE.TrackballControls( camera );\n//      controls.target.z = 150;\n// Simple substitute \"OrbitControls\" and the control should work as-is.\n\n\n\nfunction OrbitControls( object, domElement ) {\n\n\tthis.object = object;\n\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t// API\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the control orbits around\n\t// and where it pans with respect to.\n\tthis.target = new external_THREE_[\"Vector3\"]();\n\n\t// center is old, deprecated; use \"target\" instead\n\tthis.center = this.target;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for\n\t// backwards compatibility\n\tthis.noZoom = false;\n\tthis.zoomSpeed = 1.0;\n\n\t// Limits to how far you can dolly in and out\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// Set to true to disable this control\n\tthis.noRotate = false;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to true to disable this control\n\tthis.noPan = false;\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// Set to true to disable use of the keys\n\tthis.noKeys = false;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t////////////\n\t// internals\n\n\tvar scope = this;\n\n\tvar EPS = 0.000001;\n\n\tvar rotateStart = new external_THREE_[\"Vector2\"]();\n\tvar rotateEnd = new external_THREE_[\"Vector2\"]();\n\tvar rotateDelta = new external_THREE_[\"Vector2\"]();\n\n\tvar panStart = new external_THREE_[\"Vector2\"]();\n\tvar panEnd = new external_THREE_[\"Vector2\"]();\n\tvar panDelta = new external_THREE_[\"Vector2\"]();\n\tvar panOffset = new external_THREE_[\"Vector3\"]();\n\n\tvar offset = new external_THREE_[\"Vector3\"]();\n\n\tvar dollyStart = new external_THREE_[\"Vector2\"]();\n\tvar dollyEnd = new external_THREE_[\"Vector2\"]();\n\tvar dollyDelta = new external_THREE_[\"Vector2\"]();\n\n\tvar phiDelta = 0;\n\tvar thetaDelta = 0;\n\tvar scale = 1;\n\tvar pan = new external_THREE_[\"Vector3\"]();\n\n\tvar lastPosition = new external_THREE_[\"Vector3\"]();\n\n\tvar STATE = { NONE : -1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n\tvar state = STATE.NONE;\n\n\t// for reset\n\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\n\t// events\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start'};\n\tvar endEvent = { type: 'end'};\n\n\tthis.rotateLeft = function ( angle ) {\n\n\t\tif ( angle === undefined ) {\n\n\t\t\tangle = getAutoRotationAngle();\n\n\t\t}\n\n\t\tthetaDelta -= angle;\n\n\t};\n\n\tthis.rotateUp = function ( angle ) {\n\n\t\tif ( angle === undefined ) {\n\n\t\t\tangle = getAutoRotationAngle();\n\n\t\t}\n\n\t\tphiDelta -= angle;\n\n\t};\n\n\t// pass in distance in world space to move left\n\tthis.panLeft = function ( distance ) {\n\n\t\tvar te = this.object.matrix.elements;\n\n\t\t// get X column of matrix\n\t\tpanOffset.set( te[ 0 ], te[ 1 ], te[ 2 ] );\n\t\tpanOffset.multiplyScalar( - distance );\n\t\t\n\t\tpan.add( panOffset );\n\n\t};\n\n\t// pass in distance in world space to move up\n\tthis.panUp = function ( distance ) {\n\n\t\tvar te = this.object.matrix.elements;\n\n\t\t// get Y column of matrix\n\t\tpanOffset.set( te[ 4 ], te[ 5 ], te[ 6 ] );\n\t\tpanOffset.multiplyScalar( distance );\n\t\t\n\t\tpan.add( panOffset );\n\n\t};\n\t\n\t// pass in x,y of change desired in pixel space,\n\t// right and down are positive\n\tthis.pan = function ( deltaX, deltaY ) {\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\tif ( scope.object.fov !== undefined ) {\n\n\t\t\t// perspective\n\t\t\tvar position = scope.object.position;\n\t\t\tvar offset = position.clone().sub( scope.target );\n\t\t\tvar targetDistance = offset.length();\n\n\t\t\t// half of the fov is center to top of screen\n\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\tscope.panLeft( 2 * deltaX * targetDistance / element.clientHeight );\n\t\t\tscope.panUp( 2 * deltaY * targetDistance / element.clientHeight );\n\n\t\t} else if ( scope.object.top !== undefined ) {\n            \n\t\t\t// orthographic\n\t\t\tscope.panLeft( deltaX * (scope.object.right - scope.object.left) / element.clientWidth );\n\t\t\tscope.panUp( deltaY * (scope.object.top - scope.object.bottom) / element.clientHeight );\n\n\t\t} else {\n\n\t\t\t// camera neither orthographic or perspective\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\n\t\t}\n\n\t};\n\n\tthis.dollyIn = function ( dollyScale ) {\n\n\t\tif ( dollyScale === undefined ) {\n\n\t\t\tdollyScale = getZoomScale();\n\n\t\t}\n\n\t\tscale /= dollyScale;\n\n\t};\n\n\tthis.dollyOut = function ( dollyScale ) {\n\n\t\tif ( dollyScale === undefined ) {\n\n\t\t\tdollyScale = getZoomScale();\n\n\t\t}\n\n\t\tscale *= dollyScale;\n\n\t};\n\n\tthis.update = function () {\n        \n        if(scope.object.top !== undefined) {\n            this.object.top = (scale*this.object.top);\n            this.object.bottom = (scale*this.object.bottom);\n            this.object.left = (scale*this.object.left);\n            this.object.right = (scale*this.object.right);\n            \n            this.object.updateProjectionMatrix();\n\n        }\n            \n\n\t\tvar position = this.object.position;\n\n\t\toffset.copy( position ).sub( this.target );\n//\n//\t\t// angle from z-axis around y-axis\n//\n//\t\tvar theta = Math.atan2( offset.x, offset.z );\n//\n//\t\t// angle from y-axis\n//\n//\t\tvar phi = Math.atan2( Math.sqrt( offset.x * offset.x + offset.z * offset.z ), offset.y );\n//\n//\t\tif ( this.autoRotate ) {\n//\n//\t\t\tthis.rotateLeft( getAutoRotationAngle() );\n//\n//\t\t}\n//\n//\t\ttheta += thetaDelta;\n//\t\tphi += phiDelta;\n//\n//\t\t// restrict phi to be between desired limits\n//\t\tphi = Math.max( this.minPolarAngle, Math.min( this.maxPolarAngle, phi ) );\n//\n//\t\t// restrict phi to be betwee EPS and PI-EPS\n//\t\tphi = Math.max( EPS, Math.min( Math.PI - EPS, phi ) );\n//\n//\t\tvar radius = offset.length() * scale;\n//\n//\t\t// restrict radius to be between desired limits\n//\t\tradius = Math.max( this.minDistance, Math.min( this.maxDistance, radius ) );\n//\t\t\n//\t\t// move target to panned location\n\t\tthis.target.add( pan );\n//\t\t\n//\t\toffset.x = radius * Math.sin( phi ) * Math.sin( theta );\n//\t\toffset.y = radius * Math.cos( phi );\n//\t\toffset.z = radius * Math.sin( phi ) * Math.cos( theta );\n//\n\t\tposition.copy( this.target ).add( offset );\n\n\t\tthis.object.lookAt( this.target );\n\n\n//\t\tif ( lastPosition.distanceTo( this.object.position ) > 0 || scale !== 1 ) {\n\n\t\t\tthis.dispatchEvent( changeEvent );\n\n//\t\t\tlastPosition.copy( this.object.position );\n\n//\t\t}\n        \n//        thetaDelta = 0;\n//\t\tphiDelta = 0;\n\t\tscale = 1;\n\t\tpan.set( 0, 0, 0 );\n\n\t};\n\n\n\tthis.reset = function () {\n\n\t\tstate = STATE.NONE;\n\n\t\tthis.target.copy( this.target0 );\n\t\tthis.object.position.copy( this.position0 );\n\n\t\tthis.update();\n\n\t};\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tevent.preventDefault();\n\n\t\tif ( event.button === 0 ) {\n\t\t\tif ( scope.noRotate === true ) return;\n\n\t\t\tstate = STATE.ROTATE;\n\n\t\t\trotateStart.set( event.clientX, event.clientY );\n\n\t\t} else if ( event.button === 1 ) {\n\t\t\tif ( scope.noZoom === true ) return;\n\n\t\t\tstate = STATE.DOLLY;\n\n\t\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t\t} else if ( event.button === 2 ) {\n\t\t\tif ( scope.noPan === true ) return;\n\n\t\t\tstate = STATE.PAN;\n\n\t\t\tpanStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tscope.domElement.addEventListener( 'mousemove', onMouseMove, false );\n\t\tscope.domElement.addEventListener( 'mouseup', onMouseUp, false );\n\t\tscope.dispatchEvent( startEvent );\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\tif ( state === STATE.ROTATE ) {\n\n\t\t\tif ( scope.noRotate === true ) return;\n\n\t\t\trotateEnd.set( event.clientX, event.clientY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\tscope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\tscope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t} else if ( state === STATE.DOLLY ) {\n\n\t\t\tif ( scope.noZoom === true ) return;\n\n\t\t\tdollyEnd.set( event.clientX, event.clientY );\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tscope.dollyIn();\n\n\t\t\t} else {\n\n\t\t\t\tscope.dollyOut();\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t} else if ( state === STATE.PAN ) {\n\n\t\t\tif ( scope.noPan === true ) return;\n\n\t\t\tpanEnd.set( event.clientX, event.clientY );\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\t\t\t\n\t\t\tscope.pan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction onMouseUp( /* event */ ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tscope.domElement.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tscope.domElement.removeEventListener( 'mouseup', onMouseUp, false );\n\t\tscope.dispatchEvent( endEvent );\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.noZoom === true ) return;\n\n\t\tevent.preventDefault();\n\n\t\tvar delta = 0;\n\n\t\tif ( event.wheelDelta !== undefined ) { // WebKit / Opera / Explorer 9\n\n\t\t\tdelta = event.wheelDelta;\n\n\t\t} else if ( event.detail !== undefined ) { // Firefox\n\n\t\t\tdelta = - event.detail;\n\n\t\t}\n\n\t\tif ( delta > 0 ) {\n\n\t\t\tscope.dollyOut();\n\n\t\t} else {\n\n\t\t\tscope.dollyIn();\n\n\t\t}\n\n\t\tscope.update();\n\t\tscope.dispatchEvent( startEvent );\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.noKeys === true || scope.noPan === true ) return;\n\t\t\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tscope.pan( 0, scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tscope.pan( 0, - scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tscope.pan( scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tscope.pan( - scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction touchstart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\t// one-fingered touch: rotate\n\n\t\t\t\tif ( scope.noRotate === true ) return;\n\n\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\t// two-fingered touch: dolly\n\n\t\t\t\tif ( scope.noZoom === true ) return;\n\n\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\n\t\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\t\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\t\t\t\tdollyStart.set( 0, distance );\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\tif ( scope.noPan === true ) return;\n\n\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t}\n\n\tfunction touchmove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1: // one-fingered touch: rotate\n\n\t\t\t\tif ( scope.noRotate === true ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return;\n\n\t\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\t\tscope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\t\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\t\tscope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase 2: // two-fingered touch: dolly\n\n\t\t\t\tif ( scope.noZoom === true ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return;\n\n\t\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\t\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\t\tdollyEnd.set( 0, distance );\n\t\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\t\tscope.dollyOut();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tscope.dollyIn();\n\n\t\t\t\t}\n\n\t\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\tif ( scope.noPan === true ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return;\n\n\t\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\tpanDelta.subVectors( panEnd, panStart );\n\t\t\t\t\n\t\t\t\tscope.pan( panDelta.x, panDelta.y );\n\n\t\t\t\tpanStart.copy( panEnd );\n\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction touchend( /* event */ ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tscope.dispatchEvent( endEvent );\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tthis.domElement.addEventListener( 'contextmenu', function ( event ) { event.preventDefault(); }, false );\n\tthis.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\tthis.domElement.addEventListener( 'mousewheel', onMouseWheel, false );\n\tthis.domElement.addEventListener( 'DOMMouseScroll', onMouseWheel, false ); // firefox\n\n\tthis.domElement.addEventListener( 'touchstart', touchstart, false );\n\tthis.domElement.addEventListener( 'touchend', touchend, false );\n\tthis.domElement.addEventListener( 'touchmove', touchmove, false );\n\n\twindow.addEventListener( 'keydown', onKeyDown, false );\n\n};\n\nOrbitControls.prototype = Object.create( external_THREE_[\"EventDispatcher\"].prototype );\n// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n// Three.js extension functions. Webpack doesn't seem to like it if we modify the THREE object directly.\nvar THREEx = { Math: {} };\n/**\n * Returns the angle in radians of the vector (p1,p2). In other words, imagine\n * putting the base of the vector at coordinates (0,0) and finding the angle\n * from vector (1,0) to (p1,p2).\n * @param  {Object} p1 start point of the vector\n * @param  {Object} p2 end point of the vector\n * @return {Number} the angle\n */\nTHREEx.Math.angle2 = function(p1, p2) {\n\tvar v1 = new external_THREE_[\"Vector2\"](p1.x, p1.y);\n\tvar v2 = new external_THREE_[\"Vector2\"](p2.x, p2.y);\n\tv2.sub(v1); // sets v2 to be our chord\n\tv2.normalize();\n\tif(v2.y < 0) return -Math.acos(v2.x);\n\treturn Math.acos(v2.x);\n};\n\n\nTHREEx.Math.polar = function(point, distance, angle) {\n\tvar result = {};\n\tresult.x = point.x + distance * Math.cos(angle);\n\tresult.y = point.y + distance * Math.sin(angle);\n\treturn result;\n};\n\n/**\n * Calculates points for a curve between two points\n * @param startPoint - the starting point of the curve\n * @param endPoint - the ending point of the curve\n * @param bulge - a value indicating how much to curve\n * @param segments - number of segments between the two given points\n */\nTHREEx.BulgeGeometry = function ( startPoint, endPoint, bulge, segments ) {\n\n\tvar vertex, i,\n\t\tcenter, p0, p1, angle,\n\t\tradius, startAngle,\n\t\tthetaAngle;\n\n\texternal_THREE_[\"Geometry\"].call( this );\n\n\tthis.startPoint = p0 = startPoint ? new external_THREE_[\"Vector2\"](startPoint.x, startPoint.y) : new external_THREE_[\"Vector2\"](0,0);\n\tthis.endPoint = p1 = endPoint ? new external_THREE_[\"Vector2\"](endPoint.x, endPoint.y) : new external_THREE_[\"Vector2\"](1,0);\n\tthis.bulge = bulge = bulge || 1;\n\n\tangle = 4 * Math.atan(bulge);\n\tradius = p0.distanceTo(p1) / 2 / Math.sin(angle/2);\n\tcenter = THREEx.Math.polar(startPoint, radius, THREEx.Math.angle2(p0,p1) + (Math.PI / 2 - angle/2));\n\n\tthis.segments = segments = segments || Math.max( Math.abs(Math.ceil(angle/(Math.PI/18))), 6); // By default want a segment roughly every 10 degrees\n\tstartAngle = THREEx.Math.angle2(center, p0);\n\tthetaAngle = angle / segments;\n\n\n\tthis.vertices.push(new external_THREE_[\"Vector3\"](p0.x, p0.y, 0));\n\n\tfor(i = 1; i <= segments - 1; i++) {\n\n\t\tvertex = THREEx.Math.polar(center, Math.abs(radius), startAngle + thetaAngle * i);\n\n\t\tthis.vertices.push(new external_THREE_[\"Vector3\"](vertex.x, vertex.y, 0));\n\n\t}\n\n};\n\nTHREEx.BulgeGeometry.prototype = Object.create( external_THREE_[\"Geometry\"].prototype );\n\n/**\n * THREE.Loader implementation for DXF files\n * \n * @param {*} manager THREE.LoadingManager \n * \n * @see https://threejs.org/docs/#api/en/loaders/Loader\n * @author Sourabh Soni / https://www.prolincur.com\n */\nconst DXFLoader = function (manager) {\n    external_THREE_[\"Loader\"].call(this, manager);\n    this.font = null\n}\n\nDXFLoader.prototype = Object.assign( Object.create( external_THREE_[\"Loader\"].prototype ), {\n    constructor: DXFLoader,\n\n    setFont: function ( font ) {\n\t\tthis.font = font;\n\t\treturn this;\n    },\n    \n    load: function ( url, onLoad, onProgress, onError ) {\n        var scope = this;\n\t\tvar loader = new external_THREE_[\"FileLoader\"]( scope.manager );\n\n\t\tloader.setPath( scope.path );\n\t\tloader.load( url, ( text ) => {\n            try {\n                onLoad(scope.parse(text))\n            } catch (error) {\n                if (onError) {\n                    onError(error)\n                } else {\n                    console.error(error)\n                }\n                scope.manager.itemError(url)\n            }\n\t\t}, onProgress, onError );\n\n    },\n\n    parse: function ( text ) {\n        const parser = new src();\n        var dxf = parser.parseSync(text)\n        return this.loadEntities(dxf, this.font)\n    },\n\n    /**\n     *\n     * @param {Object} buffer - the dxf file content\n     * @param {Object} font - a font loaded with THREE.FontLoader \n     * @constructor\n     */\n    loadEntities: function ( data, font ) {\n\n        createLineTypeShaders(data);\n\n        var entities = []\n\n        // Create scene from dxf object (data)\n        var i, entity, obj, min_x, min_y, min_z, max_x, max_y, max_z;\n        var dims = {\n            min: { x: false, y: false, z: false},\n            max: { x: false, y: false, z: false}\n        };\n        for(i = 0; i < data.entities.length; i++) {\n            entity = data.entities[i];\n            obj = drawEntity(entity, data);\n        \n            if (obj) {\n                entities.push(obj)\n            }\n            obj = null;\n        }\n        return {\n            entities: entities,\n            dxf: data\n        }\n\n        function drawEntity(entity, data) {\n            var mesh;\n            if(entity.type === 'CIRCLE' || entity.type === 'ARC') {\n                mesh = drawArc(entity, data);\n            } else if(entity.type === 'LWPOLYLINE' || entity.type === 'LINE' || entity.type === 'POLYLINE') {\n                mesh = drawLine(entity, data);\n            } else if(entity.type === 'TEXT') {\n                mesh = drawText(entity, data);\n            } else if(entity.type === 'SOLID') {\n                mesh = drawSolid(entity, data);\n            } else if(entity.type === 'POINT') {\n                mesh = drawPoint(entity, data);\n            } else if(entity.type === 'INSERT') {\n                mesh = drawBlock(entity, data);\n            } else if(entity.type === 'SPLINE') {\n                mesh = drawSpline(entity, data);\n            } else if(entity.type === 'MTEXT') {\n                mesh = drawMtext(entity, data);\n            } else if(entity.type === 'ELLIPSE') {\n                mesh = drawEllipse(entity, data);\n            } else if(entity.type === 'DIMENSION') {\n                var dimTypeEnum = entity.dimensionType & 7;\n                if(dimTypeEnum === 0) {\n                    mesh = drawDimension(entity, data);\n                } else {\n                    console.log(\"Unsupported Dimension type: \" + dimTypeEnum);\n                }\n            }\n            else {\n                console.log(\"Unsupported Entity Type: \" + entity.type);\n            }\n            return mesh;\n        }\n\n        function drawEllipse(entity, data) {\n            var color = getColor(entity, data);\n\n            var xrad = Math.sqrt(Math.pow(entity.majorAxisEndPoint.x,2) + Math.pow(entity.majorAxisEndPoint.y,2));\n            var yrad = xrad*entity.axisRatio;\n            var rotation = Math.atan2(entity.majorAxisEndPoint.y, entity.majorAxisEndPoint.x);\n\n            var curve = new external_THREE_[\"EllipseCurve\"](\n                entity.center.x,  entity.center.y,\n                xrad, yrad,\n                entity.startAngle, entity.endAngle,\n                false, // Always counterclockwise\n                rotation\n            );\n\n            var points = curve.getPoints( 50 );\n            var geometry = new external_THREE_[\"BufferGeometry\"]().setFromPoints( points );\n            var material = new external_THREE_[\"LineBasicMaterial\"]( {  linewidth: 1, color : color } );\n\n            // Create the final object to add to the scene\n            var ellipse = new external_THREE_[\"Line\"]( geometry, material );\n            return ellipse;\n        }\n\n        function drawMtext(entity, data) {\n            var color = getColor(entity, data);\n\n            var geometry = new external_THREE_[\"TextGeometry\"]( entity.text, {\n                font: font,\n                size: entity.height * (4/5),\n                height: 1\n            });\n            var material = new external_THREE_[\"MeshBasicMaterial\"]( {color: color} );\n            var text = new external_THREE_[\"Mesh\"]( geometry, material );\n\n            // Measure what we rendered.\n            var measure = new external_THREE_[\"Box3\"]();\n            measure.setFromObject( text );\n\n            var textWidth  = measure.max.x - measure.min.x;\n\n            // If the text ends up being wider than the box, it's supposed\n            // to be multiline. Doing that in threeJS is overkill.\n            if (textWidth > entity.width) {\n                console.log(\"Can't render this multipline MTEXT entity, sorry.\", entity);\n                return undefined;\n            }\n\n            text.position.z = 0;\n            switch (entity.attachmentPoint) {\n                case 1:\n                    // Top Left\n                    text.position.x = entity.position.x;\n                    text.position.y = entity.position.y - entity.height;\n                break;\n                case 2:\n                    // Top Center\n                    text.position.x = entity.position.x - textWidth/2;\n                    text.position.y = entity.position.y - entity.height;\n                break;\n                case 3:\n                    // Top Right\n                    text.position.x = entity.position.x - textWidth;\n                    text.position.y = entity.position.y - entity.height;\n                break;\n\n                case 4:\n                    // Middle Left\n                    text.position.x = entity.position.x;\n                    text.position.y = entity.position.y - entity.height/2;\n                break;\n                case 5:\n                    // Middle Center\n                    text.position.x = entity.position.x - textWidth/2;\n                    text.position.y = entity.position.y - entity.height/2;\n                break;\n                case 6:\n                    // Middle Right\n                    text.position.x = entity.position.x - textWidth;\n                    text.position.y = entity.position.y - entity.height/2;\n                break;\n\n                case 7:\n                    // Bottom Left\n                    text.position.x = entity.position.x;\n                    text.position.y = entity.position.y;\n                break;\n                case 8:\n                    // Bottom Center\n                    text.position.x = entity.position.x - textWidth/2;\n                    text.position.y = entity.position.y;\n                break;\n                case 9:\n                    // Bottom Right\n                    text.position.x = entity.position.x - textWidth;\n                    text.position.y = entity.position.y;\n                break;\n\n                default:\n                    return undefined;\n            };\n\n            return text;\n        }\n\n        function drawSpline(entity, data) {\n            var color = getColor(entity, data);\n\n            var points = entity.controlPoints.map(function(vec) {\n                return new external_THREE_[\"Vector2\"](vec.x, vec.y);\n            });\n\n            var interpolatedPoints = [];\n            var curve;\n            if (entity.degreeOfSplineCurve === 2 || entity.degreeOfSplineCurve === 3) {\n                for(var i = 0; i + 2 < points.length; i = i + 2) {\n            if (entity.degreeOfSplineCurve === 2) {\n                            curve = new external_THREE_[\"QuadraticBezierCurve\"](points[i], points[i + 1], points[i + 2]);\n            } else {\n                curve = new external_THREE_[\"QuadraticBezierCurve3\"](points[i], points[i + 1], points[i + 2]);\n            }\n                    interpolatedPoints.push.apply(interpolatedPoints, curve.getPoints(50));\n                }\n            } else {\n                curve = new external_THREE_[\"SplineCurve\"](points);\n                interpolatedPoints = curve.getPoints( 100 );\n            }\n\n            var geometry = new external_THREE_[\"BufferGeometry\"]().setFromPoints( interpolatedPoints );\n            var material = new external_THREE_[\"LineBasicMaterial\"]( { linewidth: 1, color : color } );\n            var splineObject = new external_THREE_[\"Line\"]( geometry, material );\n\n            return splineObject;\n        }\n\n        function drawLine(entity, data) {\n            var geometry = new external_THREE_[\"Geometry\"](),\n                color = getColor(entity, data),\n                material, lineType, vertex, startPoint, endPoint, bulgeGeometry,\n                bulge, i, line;\n\n            // create geometry\n            for(i = 0; i < entity.vertices.length; i++) {\n\n                if(entity.vertices[i].bulge) {\n                    bulge = entity.vertices[i].bulge;\n                    startPoint = entity.vertices[i];\n                    endPoint = i + 1 < entity.vertices.length ? entity.vertices[i + 1] : geometry.vertices[0];\n\n                    bulgeGeometry = new THREEx.BulgeGeometry(startPoint, endPoint, bulge);\n\n                    geometry.vertices.push.apply(geometry.vertices, bulgeGeometry.vertices);\n                } else {\n                    vertex = entity.vertices[i];\n                    geometry.vertices.push(new external_THREE_[\"Vector3\"](vertex.x, vertex.y, 0));\n                }\n\n            }\n            if(entity.shape) geometry.vertices.push(geometry.vertices[0]);\n\n\n            // set material\n            if(entity.lineType) {\n                lineType = data.tables.lineType.lineTypes[entity.lineType];\n            }\n\n            if(lineType && lineType.pattern && lineType.pattern.length !== 0) {\n                material = new external_THREE_[\"LineDashedMaterial\"]({ color: color, gapSize: 4, dashSize: 4});\n            } else {\n                material = new external_THREE_[\"LineBasicMaterial\"]({ linewidth: 1, color: color });\n            }\n\n            // if(lineType && lineType.pattern && lineType.pattern.length !== 0) {\n\n            //           geometry.computeLineDistances();\n\n            //           // Ugly hack to add diffuse to this. Maybe copy the uniforms object so we\n            //           // don't add diffuse to a material.\n            //           lineType.material.uniforms.diffuse = { type: 'c', value: new THREE.Color(color) };\n\n            // \tmaterial = new THREE.ShaderMaterial({\n            // \t\tuniforms: lineType.material.uniforms,\n            // \t\tvertexShader: lineType.material.vertexShader,\n            // \t\tfragmentShader: lineType.material.fragmentShader\n            // \t});\n            // }else {\n            // \tmaterial = new THREE.LineBasicMaterial({ linewidth: 1, color: color });\n            // }\n\n            line = new external_THREE_[\"Line\"](geometry, material);\n            return line;\n        }\n        \n        function drawArc(entity, data) {\n            var startAngle, endAngle;\n            if (entity.type === 'CIRCLE') {\n                startAngle = entity.startAngle || 0;\n                endAngle = startAngle + 2 * Math.PI;\n            } else {\n                startAngle = entity.startAngle;\n                endAngle = entity.endAngle;\n            }\n\n            var curve = new external_THREE_[\"ArcCurve\"](\n                0, 0,\n                entity.radius,\n                startAngle,\n                endAngle);\n\n            var points = curve.getPoints( 32 );\n            var geometry = new external_THREE_[\"BufferGeometry\"]().setFromPoints( points );\n\n            var material = new external_THREE_[\"LineBasicMaterial\"]({ color: getColor(entity, data) });\n\n            var arc = new external_THREE_[\"Line\"](geometry, material);\n            arc.position.x = entity.center.x;\n            arc.position.y = entity.center.y;\n            arc.position.z = entity.center.z;\n\n            return arc;\n        }\n\n        function drawSolid(entity, data) {\n            var material, mesh, verts,\n                geometry = new external_THREE_[\"Geometry\"]();\n\n            verts = geometry.vertices;\n            verts.push(new external_THREE_[\"Vector3\"](entity.points[0].x, entity.points[0].y, entity.points[0].z));\n            verts.push(new external_THREE_[\"Vector3\"](entity.points[1].x, entity.points[1].y, entity.points[1].z));\n            verts.push(new external_THREE_[\"Vector3\"](entity.points[2].x, entity.points[2].y, entity.points[2].z));\n            verts.push(new external_THREE_[\"Vector3\"](entity.points[3].x, entity.points[3].y, entity.points[3].z));\n\n            // Calculate which direction the points are facing (clockwise or counter-clockwise)\n            var vector1 = new external_THREE_[\"Vector3\"]();\n            var vector2 = new external_THREE_[\"Vector3\"]();\n            vector1.subVectors(verts[1], verts[0]);\n            vector2.subVectors(verts[2], verts[0]);\n            vector1.cross(vector2);\n\n            // If z < 0 then we must draw these in reverse order\n            if(vector1.z < 0) {\n                geometry.faces.push(new external_THREE_[\"Face3\"](2, 1, 0));\n                geometry.faces.push(new external_THREE_[\"Face3\"](2, 3, 1));\n            } else {\n                geometry.faces.push(new external_THREE_[\"Face3\"](0, 1, 2));\n                geometry.faces.push(new external_THREE_[\"Face3\"](1, 3, 2));\n            }\n\n\n            material = new external_THREE_[\"MeshBasicMaterial\"]({ color: getColor(entity, data) });\n\n            return new external_THREE_[\"Mesh\"](geometry, material);\n            \n        }\n\n        function drawText(entity, data) {\n            var geometry, material, text;\n\n            if(!font)\n                return console.warn('Text is not supported without a Three.js font loaded with THREE.FontLoader! Load a font of your choice and pass this into the constructor. See the sample for this repository or Three.js examples at http://threejs.org/examples/?q=text#webgl_geometry_text for more details.');\n            \n            geometry = new external_THREE_[\"TextGeometry\"](entity.text, { font: font, height: 0, size: entity.textHeight || 12 });\n\n            if (entity.rotation) {\n                var zRotation = entity.rotation * Math.PI / 180;\n                geometry.rotateZ(zRotation);\n            }\n\n            material = new external_THREE_[\"MeshBasicMaterial\"]({ color: getColor(entity, data) });\n\n            text = new external_THREE_[\"Mesh\"](geometry, material);\n            text.position.x = entity.startPoint.x;\n            text.position.y = entity.startPoint.y;\n            text.position.z = entity.startPoint.z;\n\n            return text;\n        }\n\n        function drawPoint(entity, data) {\n            var geometry, material, point;\n\n            geometry = new external_THREE_[\"Geometry\"]();\n\n            geometry.vertices.push(new external_THREE_[\"Vector3\"](entity.position.x, entity.position.y, entity.position.z));\n\n            // TODO: could be more efficient. PointCloud per layer?\n\n            var numPoints = 1;\n\n            var color = getColor(entity, data);\n            var colors = new Float32Array( numPoints*3 );\n            colors[0] = color.r;\n            colors[1] = color.g;\n            colors[2] = color.b;\n\n            geometry.colors = colors;\n            geometry.computeBoundingBox();\n\n            material = new external_THREE_[\"PointsMaterial\"]( { size: 0.05, vertexColors: external_THREE_[\"VertexColors\"] } );\n            point = new external_THREE_[\"Points\"](geometry, material);\n            scene.add(point);\n        }\n\n        function drawDimension(entity, data) {\n            var block = data.blocks[entity.block];\n\n            if (!block || !block.entities) return null;\n\n            var group = new external_THREE_[\"Object3D\"]();\n            // if(entity.anchorPoint) {\n            //     group.position.x = entity.anchorPoint.x;\n            //     group.position.y = entity.anchorPoint.y;\n            //     group.position.z = entity.anchorPoint.z;\n            // }\n\n            for(var i = 0; i < block.entities.length; i++) {\n                var childEntity = drawEntity(block.entities[i], data, group);\n                if(childEntity) group.add(childEntity);\n            }\n\n            return group;\n        }\n\n        function drawBlock(entity, data) {\n            var block = data.blocks[entity.name];\n            \n            if (!block.entities) return null;\n\n            var group = new external_THREE_[\"Object3D\"]()\n            \n            if(entity.xScale) group.scale.x = entity.xScale;\n            if(entity.yScale) group.scale.y = entity.yScale;\n\n            if(entity.rotation) {\n                group.rotation.z = entity.rotation * Math.PI / 180;\n            }\n\n            if(entity.position) {\n                group.position.x = entity.position.x;\n                group.position.y = entity.position.y;\n                group.position.z = entity.position.z;\n            }\n            \n            for(var i = 0; i < block.entities.length; i++) {\n                var childEntity = drawEntity(block.entities[i], data, group);\n                if(childEntity) group.add(childEntity);\n            }\n\n            return group;\n        }\n\n        function getColor(entity, data) {\n            var color = 0x000000; //default\n            if(entity.color) color = entity.color;\n            else if(data.tables && data.tables.layer && data.tables.layer.layers[entity.layer])\n                color = data.tables.layer.layers[entity.layer].color;\n                \n            if(color == null || color === 0xffffff) {\n                color = 0x000000;\n            }\n            return color;\n        }\n\n        function createLineTypeShaders(data) {\n            var ltype, type;\n            if(!data.tables || !data.tables.lineType) return;\n            var ltypes = data.tables.lineType.lineTypes;\n\n            for(type in ltypes) {\n                ltype = ltypes[type];\n                if(!ltype.pattern) continue;\n                ltype.material = createDashedLineShader(ltype.pattern);\n            }\n        }\n\n        function createDashedLineShader(pattern) {\n            var i,\n                dashedLineShader = {},\n                totalLength = 0.0;\n\n            for(i = 0; i < pattern.length; i++) {\n                totalLength += Math.abs(pattern[i]);\n            }\n\n            dashedLineShader.uniforms = external_THREE_[\"UniformsUtils\"].merge([\n\n                external_THREE_[\"UniformsLib\"][ 'common' ],\n                external_THREE_[\"UniformsLib\"][ 'fog' ],\n\n                {\n                    'pattern': { type: 'fv1', value: pattern },\n                    'patternLength': { type: 'f', value: totalLength }\n                }\n\n            ]);\n\n            dashedLineShader.vertexShader = [\n                'attribute float lineDistance;',\n\n                'varying float vLineDistance;',\n\n                external_THREE_[\"ShaderChunk\"][ 'color_pars_vertex' ],\n\n                'void main() {',\n\n                external_THREE_[\"ShaderChunk\"][ 'color_vertex' ],\n\n                'vLineDistance = lineDistance;',\n\n                'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n                '}'\n            ].join('\\n');\n\n            dashedLineShader.fragmentShader = [\n                'uniform vec3 diffuse;',\n                'uniform float opacity;',\n\n                'uniform float pattern[' + pattern.length + '];',\n                'uniform float patternLength;',\n\n                'varying float vLineDistance;',\n\n                external_THREE_[\"ShaderChunk\"][ 'color_pars_fragment' ],\n                external_THREE_[\"ShaderChunk\"][ 'fog_pars_fragment' ],\n\n                'void main() {',\n\n                'float pos = mod(vLineDistance, patternLength);',\n\n                'for ( int i = 0; i < ' + pattern.length + '; i++ ) {',\n                'pos = pos - abs(pattern[i]);',\n                'if( pos < 0.0 ) {',\n                'if( pattern[i] > 0.0 ) {',\n                'gl_FragColor = vec4(1.0, 0.0, 0.0, opacity );',\n                'break;',\n                '}',\n                'discard;',\n                '}',\n\n                '}',\n\n                external_THREE_[\"ShaderChunk\"][ 'color_fragment' ],\n                external_THREE_[\"ShaderChunk\"][ 'fog_fragment' ],\n\n                '}'\n            ].join('\\n');\n\n            return dashedLineShader;\n        }\n\n        function findExtents(scene) { \n            for(var child of scene.children) {\n                var minX, maxX, minY, maxY;\n                if(child.position) {\n                    minX = Math.min(child.position.x, minX);\n                    minY = Math.min(child.position.y, minY);\n                    maxX = Math.max(child.position.x, maxX);\n                    maxY = Math.max(child.position.y, maxY);\n                }\n            }\n\n            return { min: { x: minX, y: minY }, max: { x: maxX, y: maxY }};\n        }\n\n    }})\n\n/**\n * Viewer class for a dxf object.\n * @param {Object} data - the dxf object generated by dxf-parser\n * @param {Object} parent - the parent element to which we attach the rendering canvas\n * @param {Number} width - width of the rendering canvas in pixels\n * @param {Number} height - height of the rendering canvas in pixels\n * @param {Object} font - a font loaded with THREE.FontLoader \n * @constructor\n */\nfunction Viewer(data, parent, width, height, font) {\n\n    var loader = new DXFLoader();\n\n    // Create THREE meshes\n    var entities = loader.loadEntities(data, font).entities;\n\n    var scene = new external_THREE_[\"Scene\"]();\n\n    // Create scene from dxf object (data)\n    var i, obj, min_x, min_y, min_z, max_x, max_y, max_z;\n    var dims = {\n        min: { x: false, y: false, z: false},\n        max: { x: false, y: false, z: false}\n    };\n    for(i = 0; i < entities.length; i++) {\n        obj = entities[i];\n        if (obj) {\n            var bbox = new external_THREE_[\"Box3\"]().setFromObject(obj);\n            if (bbox.min.x && ((dims.min.x === false) || (dims.min.x > bbox.min.x))) dims.min.x = bbox.min.x;\n            if (bbox.min.y && ((dims.min.y === false) || (dims.min.y > bbox.min.y))) dims.min.y = bbox.min.y;\n            if (bbox.min.z && ((dims.min.z === false) || (dims.min.z > bbox.min.z))) dims.min.z = bbox.min.z;\n            if (bbox.max.x && ((dims.max.x === false) || (dims.max.x < bbox.max.x))) dims.max.x = bbox.max.x;\n            if (bbox.max.y && ((dims.max.y === false) || (dims.max.y < bbox.max.y))) dims.max.y = bbox.max.y;\n            if (bbox.max.z && ((dims.max.z === false) || (dims.max.z < bbox.max.z))) dims.max.z = bbox.max.z;\n            scene.add(obj);\n        }\n        obj = null;\n    }\n\n    width = width || parent.innerWidth;\n    height = height || parent.innerHeight;\n    var aspectRatio = width / height;\n\n    var upperRightCorner = { x: dims.max.x, y: dims.max.y };\n    var lowerLeftCorner = { x: dims.min.x, y: dims.min.y };\n\n    // Figure out the current viewport extents\n    var vp_width = upperRightCorner.x - lowerLeftCorner.x;\n    var vp_height = upperRightCorner.y - lowerLeftCorner.y;\n    var center = center || {\n        x: vp_width / 2 + lowerLeftCorner.x,\n        y: vp_height / 2 + lowerLeftCorner.y\n    };\n\n    // Fit all objects into current ThreeDXF viewer\n    var extentsAspectRatio = Math.abs(vp_width / vp_height);\n    if (aspectRatio > extentsAspectRatio) {\n        vp_width = vp_height * aspectRatio;\n    } else {\n        vp_height = vp_width / aspectRatio;\n    }\n    \n    var viewPort = {\n        bottom: -vp_height / 2,\n        left: -vp_width / 2,\n        top: vp_height / 2,\n        right: vp_width / 2,\n        center: {\n            x: center.x,\n            y: center.y\n        }\n    };\n\n    var camera = new external_THREE_[\"OrthographicCamera\"](viewPort.left, viewPort.right, viewPort.top, viewPort.bottom, 1, 19);\n    camera.position.z = 10;\n    camera.position.x = viewPort.center.x;\n    camera.position.y = viewPort.center.y;\n\n    var renderer = this.renderer = new external_THREE_[\"WebGLRenderer\"]();\n    renderer.setSize(width, height);\n    renderer.setClearColor(0xfffffff, 1);\n\n    parent.appendChild(renderer.domElement);\n    parent.style.display = 'block';\n\n    //TODO: Need to make this an option somehow so others can roll their own controls.\n    var controls = new OrbitControls(camera, parent);\n    controls.target.x = camera.position.x;\n    controls.target.y = camera.position.y;\n    controls.target.z = 0;\n    controls.zoomSpeed = 3;\n\n    //Uncomment this to disable rotation (does not make much sense with 2D drawings).\n    //controls.enableRotate = false;\n\n    this.render = function() { renderer.render(scene, camera) };\n    controls.addEventListener('change', this.render);\n    this.render();\n    controls.update();\n\n    this.resize = function(width, height) {\n        var originalWidth = renderer.domElement.width;\n        var originalHeight = renderer.domElement.height;\n\n        var hscale = width / originalWidth;\n        var vscale = height / originalHeight;\n\n\n        camera.top = (vscale * camera.top);\n        camera.bottom = (vscale * camera.bottom);\n        camera.left = (hscale * camera.left);\n        camera.right = (hscale * camera.right);\n\n//        camera.updateProjectionMatrix();\n\n        renderer.setSize(width, height);\n        renderer.setClearColor(0xfffffff, 1);\n        this.render();\n    };\n}\n\n// Show/Hide helpers from https://plainjs.com/javascript/effects/hide-or-show-an-element-42/\n// get the default display style of an element\nfunction defaultDisplay(tag) {\n    var iframe = document.createElement('iframe');\n    iframe.setAttribute('frameborder', 0);\n    iframe.setAttribute('width', 0);\n    iframe.setAttribute('height', 0);\n    document.documentElement.appendChild(iframe);\n\n    var doc = (iframe.contentWindow || iframe.contentDocument).document;\n\n    // IE support\n    doc.write();\n    doc.close();\n\n    var testEl = doc.createElement(tag);\n    doc.documentElement.appendChild(testEl);\n    var display = (window.getComputedStyle ? getComputedStyle(testEl, null) : testEl.currentStyle).display\n    iframe.parentNode.removeChild(iframe);\n    return display;\n}\n\n// actual show/hide function used by show() and hide() below\nfunction showHide(el, show) {\n    var value = el.getAttribute('data-olddisplay'),\n    display = el.style.display,\n    computedDisplay = (window.getComputedStyle ? getComputedStyle(el, null) : el.currentStyle).display;\n\n    if (show) {\n        if (!value && display === 'none') el.style.display = '';\n        if (el.style.display === '' && (computedDisplay === 'none')) value = value || defaultDisplay(el.nodeName);\n    } else {\n        if (display && display !== 'none' || !(computedDisplay == 'none'))\n            el.setAttribute('data-olddisplay', (computedDisplay == 'none') ? display : computedDisplay);\n    }\n    if (!show || el.style.display === 'none' || el.style.display === '')\n        el.style.display = show ? value || '' : 'none';\n}\n\n// helper functions\nfunction show(el) { showHide(el, true); }\nfunction hide(el) { showHide(el); }\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")}])}));